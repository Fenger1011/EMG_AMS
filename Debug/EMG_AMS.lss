
EMG_AMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000686  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c3  00800200  00800200  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d7  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e56  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068c  00000000  00000000  00002811  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ee  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  000036b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	94 c0       	rjmp	.+296    	; 0x19e <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	25 e0       	ldi	r18, 0x05	; 5
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 3c       	cpi	r26, 0xC3	; 195
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	e9 d0       	rcall	.+466    	; 0x2d8 <main>
 106:	bd c2       	rjmp	.+1402   	; 0x682 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <USART0_Init>:

// Initializes USART
void USART0_Init(unsigned int ubrr) {
	
	// Need to set the Baud rate registers for USART
	UBRR0H = (unsigned char)(ubrr >> 8); // Holds high byte (15-8)
 10a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr; // Holds low byte (7-0)
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0B = (1 << TXEN0); // UCSR0B is USART control and status register B, (1<<TXEN0) enables transmission
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // UCSR0C is USART control and status register C, this sets USART to 8-bit mode, USBS0=0 mean 1 stop bit {8N1 mode}
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 11e:	08 95       	ret

00000120 <USART0_Transmit>:
}

// Transmits 1 byte of data
void USART0_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0))); // Loops until UDRE0 in UCSR0A becomes 1 (When UDRE0=1, status flag is low, we can transmit again)
 120:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 124:	95 ff       	sbrs	r25, 5
 126:	fc cf       	rjmp	.-8      	; 0x120 <USART0_Transmit>
	UDR0 = data; // Set send/receive USART register to data
 128:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 12c:	08 95       	ret

0000012e <USART0_SendString>:
}

void USART0_SendString(const char *str) {
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	while (*str) USART0_Transmit(*str++); // While characters in string (*str) to transmit, send character, in C strings are null-terminated.
 134:	02 c0       	rjmp	.+4      	; 0x13a <USART0_SendString+0xc>
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	f3 df       	rcall	.-26     	; 0x120 <USART0_Transmit>
 13a:	88 81       	ld	r24, Y
 13c:	81 11       	cpse	r24, r1
 13e:	fb cf       	rjmp	.-10     	; 0x136 <USART0_SendString+0x8>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <pwm_init>:
volatile uint8_t emg_buffer_full = 0;			// Flag for when sample buffer is full and calculations should be triggered


void pwm_init(void) {
	// Set PE3 (OC3A, Arduino Mega Pin 5) as output
	DDRE |= (1 << PE3);
 146:	8d b1       	in	r24, 0x0d	; 13
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	8d b9       	out	0x0d, r24	; 13
	
	// Fast PWM with ICR3 as TOP, Non-inverted PWM
	TCCR3A = (1 << COM3A1) | (1 << WGM31);
 14c:	82 e8       	ldi	r24, 0x82	; 130
 14e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS31) | (1 << CS30); // Prescaler 64
 152:	8b e1       	ldi	r24, 0x1B	; 27
 154:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	
	ICR3 = 4999; // TOP ? sets PWM frequency to 50 Hz
 158:	87 e8       	ldi	r24, 0x87	; 135
 15a:	93 e1       	ldi	r25, 0x13	; 19
 15c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 160:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
 164:	08 95       	ret

00000166 <pwm_set_duty>:
}

void pwm_set_duty(uint16_t duty_percent) {
	OCR3A = (uint32_t)ICR3 * duty_percent / 100;
 166:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7c0096>
 16a:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7c0097>
 16e:	dc 01       	movw	r26, r24
 170:	40 d2       	rcall	.+1152   	; 0x5f2 <__umulhisi3>
 172:	24 e6       	ldi	r18, 0x64	; 100
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	13 d2       	rcall	.+1062   	; 0x5a2 <__udivmodsi4>
 17c:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 180:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 184:	08 95       	ret

00000186 <adc_init>:


/*******************************************************ADC*************************************************************/
// Initializes ADC
void adc_init(void) {
	ADMUX  = (1 << REFS0);									// AVcc as ref
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN)  | (1 << ADIE)						// Enable ADC + interrupt
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	8f e8       	ldi	r24, 0x8F	; 143
 192:	80 83       	st	Z, r24
		   | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Prescaler 128
	sei();													// Global interrupts on
 194:	78 94       	sei
	ADCSRA |= (1 << ADSC);									// Kick off first conversion
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <__vector_29>:
}
/***********************************************************************************************************************/

/*******************************************************ISR*************************************************************/
ISR(ADC_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	0b b6       	in	r0, 0x3b	; 59
 1aa:	0f 92       	push	r0
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	emg_samples[emg_index++] = ADC;
 1b8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <emg_index>
 1bc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <emg_index+0x1>
 1c0:	9c 01       	movw	r18, r24
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <emg_index+0x1>
 1ca:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <emg_index>
 1ce:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1d2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	fc 01       	movw	r30, r24
 1dc:	ed 5f       	subi	r30, 0xFD	; 253
 1de:	fd 4f       	sbci	r31, 0xFD	; 253
 1e0:	31 83       	std	Z+1, r19	; 0x01
 1e2:	20 83       	st	Z, r18

	if (emg_index >= BUFFER_SIZE) {
 1e4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <emg_index>
 1e8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <emg_index+0x1>
 1ec:	80 3e       	cpi	r24, 0xE0	; 224
 1ee:	91 40       	sbci	r25, 0x01	; 1
 1f0:	38 f0       	brcs	.+14     	; 0x200 <__vector_29+0x62>
		emg_index = 0;
 1f2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <emg_index+0x1>
 1f6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <emg_index>
		emg_buffer_full = 1;  // set flag to signal main
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}

	ADCSRA |= (1 << ADSC); // start next conversion
 200:	ea e7       	ldi	r30, 0x7A	; 122
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 64       	ori	r24, 0x40	; 64
 208:	80 83       	st	Z, r24
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0b be       	out	0x3b, r0	; 59
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <calculate_RMS>:
/***********************************************************************************************************************/

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15

	uint32_t sum = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
/***********************************************************************************************************************/

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {

	uint32_t sum = 0;
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	ba 01       	movw	r22, r20
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 23e:	0c c0       	rjmp	.+24     	; 0x258 <calculate_RMS+0x34>
		sum += emg_samples[i];
 240:	fc 01       	movw	r30, r24
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	ed 5f       	subi	r30, 0xFD	; 253
 248:	fd 4f       	sbci	r31, 0xFD	; 253
 24a:	20 81       	ld	r18, Z
 24c:	31 81       	ldd	r19, Z+1	; 0x01
 24e:	42 0f       	add	r20, r18
 250:	53 1f       	adc	r21, r19
 252:	61 1d       	adc	r22, r1
 254:	71 1d       	adc	r23, r1

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {

	uint32_t sum = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	80 3e       	cpi	r24, 0xE0	; 224
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	92 07       	cpc	r25, r18
 25e:	80 f3       	brcs	.-32     	; 0x240 <calculate_RMS+0x1c>
		sum += emg_samples[i];
	}
	uint16_t mean = sum / BUFFER_SIZE;
 260:	cb 01       	movw	r24, r22
 262:	ba 01       	movw	r22, r20
 264:	20 ee       	ldi	r18, 0xE0	; 224
 266:	31 e0       	ldi	r19, 0x01	; 1
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	9a d1       	rcall	.+820    	; 0x5a2 <__udivmodsi4>
 26e:	49 01       	movw	r8, r18
 270:	5a 01       	movw	r10, r20

	uint32_t sum_squares = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	50 e0       	ldi	r21, 0x00	; 0
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
		sum += emg_samples[i];
	}
	uint16_t mean = sum / BUFFER_SIZE;

	uint32_t sum_squares = 0;
 276:	c1 2c       	mov	r12, r1
 278:	d1 2c       	mov	r13, r1
 27a:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 27c:	11 c0       	rjmp	.+34     	; 0x2a0 <calculate_RMS+0x7c>
		int16_t centered_sample = (int16_t)emg_samples[i] - (int16_t)mean;
 27e:	fa 01       	movw	r30, r20
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ed 5f       	subi	r30, 0xFD	; 253
 286:	fd 4f       	sbci	r31, 0xFD	; 253
 288:	a0 81       	ld	r26, Z
 28a:	b1 81       	ldd	r27, Z+1	; 0x01
 28c:	a8 19       	sub	r26, r8
 28e:	b9 09       	sbc	r27, r9
		sum_squares += (uint32_t)centered_sample * (uint32_t)centered_sample;
 290:	9d 01       	movw	r18, r26
 292:	a9 d1       	rcall	.+850    	; 0x5e6 <__mulhisi3>
 294:	c6 0e       	add	r12, r22
 296:	d7 1e       	adc	r13, r23
 298:	e8 1e       	adc	r14, r24
 29a:	f9 1e       	adc	r15, r25
		sum += emg_samples[i];
	}
	uint16_t mean = sum / BUFFER_SIZE;

	uint32_t sum_squares = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 29c:	4f 5f       	subi	r20, 0xFF	; 255
 29e:	5f 4f       	sbci	r21, 0xFF	; 255
 2a0:	40 3e       	cpi	r20, 0xE0	; 224
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	58 07       	cpc	r21, r24
 2a6:	58 f3       	brcs	.-42     	; 0x27e <calculate_RMS+0x5a>
		int16_t centered_sample = (int16_t)emg_samples[i] - (int16_t)mean;
		sum_squares += (uint32_t)centered_sample * (uint32_t)centered_sample;
	}

	uint32_t mean_square = sum_squares / BUFFER_SIZE;
 2a8:	c7 01       	movw	r24, r14
 2aa:	b6 01       	movw	r22, r12
 2ac:	20 ee       	ldi	r18, 0xE0	; 224
 2ae:	31 e0       	ldi	r19, 0x01	; 1
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	76 d1       	rcall	.+748    	; 0x5a2 <__udivmodsi4>
 2b6:	69 01       	movw	r12, r18
 2b8:	7a 01       	movw	r14, r20
	uint16_t rms = (uint16_t)sqrt((double)mean_square);
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	b1 d0       	rcall	.+354    	; 0x422 <__floatunsisf>
 2c0:	1a d1       	rcall	.+564    	; 0x4f6 <sqrt>
 2c2:	83 d0       	rcall	.+262    	; 0x3ca <__fixunssfsi>
 2c4:	cb 01       	movw	r24, r22

	return rms;  // 0..1023 ? ADC range RMS (centered)
}
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	bf 90       	pop	r11
 2d0:	af 90       	pop	r10
 2d2:	9f 90       	pop	r9
 2d4:	8f 90       	pop	r8
 2d6:	08 95       	ret

000002d8 <main>:
 2d8:	cf 93       	push	r28
/************************************************************************************************************************/

int main(void) {
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	2a 97       	sbiw	r28, 0x0a	; 10
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61

	USART0_Init(MYUBRR);
 2ec:	87 e6       	ldi	r24, 0x67	; 103
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0c df       	rcall	.-488    	; 0x10a <USART0_Init>
	adc_init();
 2f2:	49 df       	rcall	.-366    	; 0x186 <adc_init>
	pwm_init();
 2f4:	28 df       	rcall	.-432    	; 0x146 <pwm_init>
 2f6:	84 b1       	in	r24, 0x04	; 4
	uint16_t overThreshold = 0;
	uint16_t underThreshold = 0;
	char buffer[10];  // Enough for millivolt values (max "5000\0")
	
	// Set pin 13 (PB7) as output for debugging
	DDRB |= (1 << PB7);
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	84 b9       	out	0x04, r24	; 4
 2fc:	a1 2c       	mov	r10, r1

	uint16_t rms_adc = 0;
	uint32_t rms_mv = 0;
	uint16_t threshold = 200; //Threshold in mV for when to move motor
	uint16_t overThreshold = 0;
	uint16_t underThreshold = 0;
 2fe:	b1 2c       	mov	r11, r1
 300:	00 e0       	ldi	r16, 0x00	; 0
	pwm_init();

	uint16_t rms_adc = 0;
	uint32_t rms_mv = 0;
	uint16_t threshold = 200; //Threshold in mV for when to move motor
	uint16_t overThreshold = 0;
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	
	while (1) {

		// Check if EMG buffer is full (ISR sets this flag)
		if (emg_buffer_full) {
 308:	88 23       	and	r24, r24
 30a:	e1 f3       	breq	.-8      	; 0x304 <main+0x2c>
			emg_buffer_full = 0;  // Clear flag
 30c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>

			// Calculate RMS from EMG samples buffer
			rms_adc = calculate_RMS();
 310:	89 df       	rcall	.-238    	; 0x224 <calculate_RMS>

			// Convert ADC value to millivolts
			rms_mv = (uint32_t)rms_adc * VREF / 1023;
 312:	9c 01       	movw	r18, r24
 314:	a8 e8       	ldi	r26, 0x88	; 136
 316:	b3 e1       	ldi	r27, 0x13	; 19
 318:	6c d1       	rcall	.+728    	; 0x5f2 <__umulhisi3>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	33 e0       	ldi	r19, 0x03	; 3
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	3f d1       	rcall	.+638    	; 0x5a2 <__udivmodsi4>
 324:	c2 2e       	mov	r12, r18
 326:	d3 2e       	mov	r13, r19
 328:	e4 2e       	mov	r14, r20
 32a:	f5 2e       	mov	r15, r21
 32c:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 32e:	be 01       	movw	r22, r28
 330:	6f 5f       	subi	r22, 0xFF	; 255
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	82 2f       	mov	r24, r18
 336:	93 2f       	mov	r25, r19

			// Convert rms_mv to string
			itoa(rms_mv, buffer, 10);  // Convert to decimal string

			USART0_SendString(buffer);
 338:	71 d1       	rcall	.+738    	; 0x61c <__itoa_ncheck>
 33a:	ce 01       	movw	r24, r28
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	f7 de       	rcall	.-530    	; 0x12e <USART0_SendString>
			
			// Send newline
			USART0_Transmit('\n');
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	ee de       	rcall	.-548    	; 0x120 <USART0_Transmit>
 344:	28 ec       	ldi	r18, 0xC8	; 200
			
			// If 50ms window RMS value above threshold
			if (rms_mv >= threshold) {
 346:	c2 16       	cp	r12, r18
 348:	d1 04       	cpc	r13, r1
 34a:	e1 04       	cpc	r14, r1
 34c:	f1 04       	cpc	r15, r1
 34e:	c8 f0       	brcs	.+50     	; 0x382 <main+0xaa>
 350:	0f 5f       	subi	r16, 0xFF	; 255
				overThreshold++;
 352:	1f 4f       	sbci	r17, 0xFF	; 255
				
				if (overThreshold == 3) {
 354:	03 30       	cpi	r16, 0x03	; 3
 356:	11 05       	cpc	r17, r1
 358:	a1 f4       	brne	.+40     	; 0x382 <main+0xaa>
					PORTB |= (1 << PB7); // Turn ON LED
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	85 b9       	out	0x05, r24	; 5
					pwm_set_duty(6);
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	00 df       	rcall	.-512    	; 0x166 <pwm_set_duty>
 366:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	99 e6       	ldi	r25, 0x69	; 105
 36a:	28 e1       	ldi	r18, 0x18	; 24
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	20 40       	sbci	r18, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x94>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x9e>
 376:	00 00       	nop
					_delay_ms(500);
					pwm_set_duty(0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	f4 de       	rcall	.-536    	; 0x166 <pwm_set_duty>
 37e:	a1 2c       	mov	r10, r1
					underThreshold = 0;
 380:	b1 2c       	mov	r11, r1
 382:	89 ec       	ldi	r24, 0xC9	; 201
				}
			}

			// If 50ms window RMS value below threshold
			if (rms_mv <= threshold) {
 384:	c8 16       	cp	r12, r24
 386:	d1 04       	cpc	r13, r1
 388:	e1 04       	cpc	r14, r1
 38a:	f1 04       	cpc	r15, r1
 38c:	08 f0       	brcs	.+2      	; 0x390 <main+0xb8>
 38e:	ba cf       	rjmp	.-140    	; 0x304 <main+0x2c>
 390:	9f ef       	ldi	r25, 0xFF	; 255
				underThreshold++;
 392:	a9 1a       	sub	r10, r25
 394:	b9 0a       	sbc	r11, r25
				
				if (underThreshold == 5) {
 396:	25 e0       	ldi	r18, 0x05	; 5
 398:	a2 16       	cp	r10, r18
 39a:	b1 04       	cpc	r11, r1
 39c:	09 f0       	breq	.+2      	; 0x3a0 <main+0xc8>
 39e:	b2 cf       	rjmp	.-156    	; 0x304 <main+0x2c>
					PORTB &= ~(1 << PB7); // Turn OFF LED
 3a0:	85 b1       	in	r24, 0x05	; 5
 3a2:	8f 77       	andi	r24, 0x7F	; 127
 3a4:	85 b9       	out	0x05, r24	; 5
					pwm_set_duty(9);
 3a6:	89 e0       	ldi	r24, 0x09	; 9
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	dd de       	rcall	.-582    	; 0x166 <pwm_set_duty>
 3ac:	8f e7       	ldi	r24, 0x7F	; 127
 3ae:	91 e3       	ldi	r25, 0x31	; 49
 3b0:	27 e1       	ldi	r18, 0x17	; 23
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	20 40       	sbci	r18, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0xda>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xe4>
 3bc:	00 00       	nop
					_delay_ms(475);
					pwm_set_duty(0);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	d1 de       	rcall	.-606    	; 0x166 <pwm_set_duty>
 3c4:	00 e0       	ldi	r16, 0x00	; 0
					overThreshold = 0;
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	9d cf       	rjmp	.-198    	; 0x304 <main+0x2c>

000003ca <__fixunssfsi>:
 3ca:	70 d0       	rcall	.+224    	; 0x4ac <__fp_splitA>
 3cc:	88 f0       	brcs	.+34     	; 0x3f0 <__fixunssfsi+0x26>
 3ce:	9f 57       	subi	r25, 0x7F	; 127
 3d0:	90 f0       	brcs	.+36     	; 0x3f6 <__fixunssfsi+0x2c>
 3d2:	b9 2f       	mov	r27, r25
 3d4:	99 27       	eor	r25, r25
 3d6:	b7 51       	subi	r27, 0x17	; 23
 3d8:	a0 f0       	brcs	.+40     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3da:	d1 f0       	breq	.+52     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	1a f0       	brmi	.+6      	; 0x3ec <__fixunssfsi+0x22>
 3e6:	ba 95       	dec	r27
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <__fixunssfsi+0x12>
 3ea:	12 c0       	rjmp	.+36     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ec:	b1 30       	cpi	r27, 0x01	; 1
 3ee:	81 f0       	breq	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f0:	77 d0       	rcall	.+238    	; 0x4e0 <__fp_zero>
 3f2:	b1 e0       	ldi	r27, 0x01	; 1
 3f4:	08 95       	ret
 3f6:	74 c0       	rjmp	.+232    	; 0x4e0 <__fp_zero>
 3f8:	67 2f       	mov	r22, r23
 3fa:	78 2f       	mov	r23, r24
 3fc:	88 27       	eor	r24, r24
 3fe:	b8 5f       	subi	r27, 0xF8	; 248
 400:	39 f0       	breq	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	b9 3f       	cpi	r27, 0xF9	; 249
 404:	cc f3       	brlt	.-14     	; 0x3f8 <__fixunssfsi+0x2e>
 406:	86 95       	lsr	r24
 408:	77 95       	ror	r23
 40a:	67 95       	ror	r22
 40c:	b3 95       	inc	r27
 40e:	d9 f7       	brne	.-10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 410:	3e f4       	brtc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 412:	90 95       	com	r25
 414:	80 95       	com	r24
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__floatunsisf>:
 422:	e8 94       	clt
 424:	09 c0       	rjmp	.+18     	; 0x438 <__floatsisf+0x12>

00000426 <__floatsisf>:
 426:	97 fb       	bst	r25, 7
 428:	3e f4       	brtc	.+14     	; 0x438 <__floatsisf+0x12>
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	99 23       	and	r25, r25
 43a:	a9 f0       	breq	.+42     	; 0x466 <__floatsisf+0x40>
 43c:	f9 2f       	mov	r31, r25
 43e:	96 e9       	ldi	r25, 0x96	; 150
 440:	bb 27       	eor	r27, r27
 442:	93 95       	inc	r25
 444:	f6 95       	lsr	r31
 446:	87 95       	ror	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f1 11       	cpse	r31, r1
 450:	f8 cf       	rjmp	.-16     	; 0x442 <__floatsisf+0x1c>
 452:	fa f4       	brpl	.+62     	; 0x492 <__floatsisf+0x6c>
 454:	bb 0f       	add	r27, r27
 456:	11 f4       	brne	.+4      	; 0x45c <__floatsisf+0x36>
 458:	60 ff       	sbrs	r22, 0
 45a:	1b c0       	rjmp	.+54     	; 0x492 <__floatsisf+0x6c>
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	16 c0       	rjmp	.+44     	; 0x492 <__floatsisf+0x6c>
 466:	88 23       	and	r24, r24
 468:	11 f0       	breq	.+4      	; 0x46e <__floatsisf+0x48>
 46a:	96 e9       	ldi	r25, 0x96	; 150
 46c:	11 c0       	rjmp	.+34     	; 0x490 <__floatsisf+0x6a>
 46e:	77 23       	and	r23, r23
 470:	21 f0       	breq	.+8      	; 0x47a <__floatsisf+0x54>
 472:	9e e8       	ldi	r25, 0x8E	; 142
 474:	87 2f       	mov	r24, r23
 476:	76 2f       	mov	r23, r22
 478:	05 c0       	rjmp	.+10     	; 0x484 <__floatsisf+0x5e>
 47a:	66 23       	and	r22, r22
 47c:	71 f0       	breq	.+28     	; 0x49a <__floatsisf+0x74>
 47e:	96 e8       	ldi	r25, 0x86	; 134
 480:	86 2f       	mov	r24, r22
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	2a f0       	brmi	.+10     	; 0x492 <__floatsisf+0x6c>
 488:	9a 95       	dec	r25
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	da f7       	brpl	.-10     	; 0x488 <__floatsisf+0x62>
 492:	88 0f       	add	r24, r24
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	97 f9       	bld	r25, 7
 49a:	08 95       	ret

0000049c <__fp_split3>:
 49c:	57 fd       	sbrc	r21, 7
 49e:	90 58       	subi	r25, 0x80	; 128
 4a0:	44 0f       	add	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	59 f0       	breq	.+22     	; 0x4bc <__fp_splitA+0x10>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <__fp_splitA+0x1a>
 4aa:	47 95       	ror	r20

000004ac <__fp_splitA>:
 4ac:	88 0f       	add	r24, r24
 4ae:	97 fb       	bst	r25, 7
 4b0:	99 1f       	adc	r25, r25
 4b2:	61 f0       	breq	.+24     	; 0x4cc <__fp_splitA+0x20>
 4b4:	9f 3f       	cpi	r25, 0xFF	; 255
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <__fp_splitA+0x2a>
 4b8:	87 95       	ror	r24
 4ba:	08 95       	ret
 4bc:	12 16       	cp	r1, r18
 4be:	13 06       	cpc	r1, r19
 4c0:	14 06       	cpc	r1, r20
 4c2:	55 1f       	adc	r21, r21
 4c4:	f2 cf       	rjmp	.-28     	; 0x4aa <__fp_split3+0xe>
 4c6:	46 95       	lsr	r20
 4c8:	f1 df       	rcall	.-30     	; 0x4ac <__fp_splitA>
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <__fp_splitA+0x30>
 4cc:	16 16       	cp	r1, r22
 4ce:	17 06       	cpc	r1, r23
 4d0:	18 06       	cpc	r1, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	f1 cf       	rjmp	.-30     	; 0x4b8 <__fp_splitA+0xc>
 4d6:	86 95       	lsr	r24
 4d8:	71 05       	cpc	r23, r1
 4da:	61 05       	cpc	r22, r1
 4dc:	08 94       	sec
 4de:	08 95       	ret

000004e0 <__fp_zero>:
 4e0:	e8 94       	clt

000004e2 <__fp_szero>:
 4e2:	bb 27       	eor	r27, r27
 4e4:	66 27       	eor	r22, r22
 4e6:	77 27       	eor	r23, r23
 4e8:	cb 01       	movw	r24, r22
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__fp_szero+0x12>
 4f0:	0e f4       	brtc	.+2      	; 0x4f4 <__fp_szero+0x12>
 4f2:	4d c0       	rjmp	.+154    	; 0x58e <__fp_nan>
 4f4:	3e c0       	rjmp	.+124    	; 0x572 <__fp_mpack>

000004f6 <sqrt>:
 4f6:	da df       	rcall	.-76     	; 0x4ac <__fp_splitA>
 4f8:	d0 f3       	brcs	.-12     	; 0x4ee <__fp_szero+0xc>
 4fa:	99 23       	and	r25, r25
 4fc:	d9 f3       	breq	.-10     	; 0x4f4 <__fp_szero+0x12>
 4fe:	ce f3       	brts	.-14     	; 0x4f2 <__fp_szero+0x10>
 500:	9f 57       	subi	r25, 0x7F	; 127
 502:	55 0b       	sbc	r21, r21
 504:	87 ff       	sbrs	r24, 7
 506:	46 d0       	rcall	.+140    	; 0x594 <__fp_norm2>
 508:	00 24       	eor	r0, r0
 50a:	a0 e6       	ldi	r26, 0x60	; 96
 50c:	40 ea       	ldi	r20, 0xA0	; 160
 50e:	90 01       	movw	r18, r0
 510:	80 58       	subi	r24, 0x80	; 128
 512:	56 95       	lsr	r21
 514:	97 95       	ror	r25
 516:	28 f4       	brcc	.+10     	; 0x522 <sqrt+0x2c>
 518:	80 5c       	subi	r24, 0xC0	; 192
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	20 f0       	brcs	.+8      	; 0x52a <sqrt+0x34>
 522:	26 17       	cp	r18, r22
 524:	37 07       	cpc	r19, r23
 526:	48 07       	cpc	r20, r24
 528:	30 f4       	brcc	.+12     	; 0x536 <sqrt+0x40>
 52a:	62 1b       	sub	r22, r18
 52c:	73 0b       	sbc	r23, r19
 52e:	84 0b       	sbc	r24, r20
 530:	20 29       	or	r18, r0
 532:	31 29       	or	r19, r1
 534:	4a 2b       	or	r20, r26
 536:	a6 95       	lsr	r26
 538:	17 94       	ror	r1
 53a:	07 94       	ror	r0
 53c:	20 25       	eor	r18, r0
 53e:	31 25       	eor	r19, r1
 540:	4a 27       	eor	r20, r26
 542:	58 f7       	brcc	.-42     	; 0x51a <sqrt+0x24>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	88 1f       	adc	r24, r24
 54a:	20 f0       	brcs	.+8      	; 0x554 <sqrt+0x5e>
 54c:	26 17       	cp	r18, r22
 54e:	37 07       	cpc	r19, r23
 550:	48 07       	cpc	r20, r24
 552:	30 f4       	brcc	.+12     	; 0x560 <sqrt+0x6a>
 554:	62 0b       	sbc	r22, r18
 556:	73 0b       	sbc	r23, r19
 558:	84 0b       	sbc	r24, r20
 55a:	20 0d       	add	r18, r0
 55c:	31 1d       	adc	r19, r1
 55e:	41 1d       	adc	r20, r1
 560:	a0 95       	com	r26
 562:	81 f7       	brne	.-32     	; 0x544 <sqrt+0x4e>
 564:	b9 01       	movw	r22, r18
 566:	84 2f       	mov	r24, r20
 568:	91 58       	subi	r25, 0x81	; 129
 56a:	88 0f       	add	r24, r24
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
 570:	08 95       	ret

00000572 <__fp_mpack>:
 572:	9f 3f       	cpi	r25, 0xFF	; 255
 574:	31 f0       	breq	.+12     	; 0x582 <__fp_mpack_finite+0xc>

00000576 <__fp_mpack_finite>:
 576:	91 50       	subi	r25, 0x01	; 1
 578:	20 f4       	brcc	.+8      	; 0x582 <__fp_mpack_finite+0xc>
 57a:	87 95       	ror	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b7 95       	ror	r27
 582:	88 0f       	add	r24, r24
 584:	91 1d       	adc	r25, r1
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	97 f9       	bld	r25, 7
 58c:	08 95       	ret

0000058e <__fp_nan>:
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	08 95       	ret

00000594 <__fp_norm2>:
 594:	91 50       	subi	r25, 0x01	; 1
 596:	50 40       	sbci	r21, 0x00	; 0
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	88 1f       	adc	r24, r24
 59e:	d2 f7       	brpl	.-12     	; 0x594 <__fp_norm2>
 5a0:	08 95       	ret

000005a2 <__udivmodsi4>:
 5a2:	a1 e2       	ldi	r26, 0x21	; 33
 5a4:	1a 2e       	mov	r1, r26
 5a6:	aa 1b       	sub	r26, r26
 5a8:	bb 1b       	sub	r27, r27
 5aa:	fd 01       	movw	r30, r26
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <__udivmodsi4_ep>

000005ae <__udivmodsi4_loop>:
 5ae:	aa 1f       	adc	r26, r26
 5b0:	bb 1f       	adc	r27, r27
 5b2:	ee 1f       	adc	r30, r30
 5b4:	ff 1f       	adc	r31, r31
 5b6:	a2 17       	cp	r26, r18
 5b8:	b3 07       	cpc	r27, r19
 5ba:	e4 07       	cpc	r30, r20
 5bc:	f5 07       	cpc	r31, r21
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__udivmodsi4_ep>
 5c0:	a2 1b       	sub	r26, r18
 5c2:	b3 0b       	sbc	r27, r19
 5c4:	e4 0b       	sbc	r30, r20
 5c6:	f5 0b       	sbc	r31, r21

000005c8 <__udivmodsi4_ep>:
 5c8:	66 1f       	adc	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	1a 94       	dec	r1
 5d2:	69 f7       	brne	.-38     	; 0x5ae <__udivmodsi4_loop>
 5d4:	60 95       	com	r22
 5d6:	70 95       	com	r23
 5d8:	80 95       	com	r24
 5da:	90 95       	com	r25
 5dc:	9b 01       	movw	r18, r22
 5de:	ac 01       	movw	r20, r24
 5e0:	bd 01       	movw	r22, r26
 5e2:	cf 01       	movw	r24, r30
 5e4:	08 95       	ret

000005e6 <__mulhisi3>:
 5e6:	05 d0       	rcall	.+10     	; 0x5f2 <__umulhisi3>
 5e8:	33 23       	and	r19, r19
 5ea:	12 f4       	brpl	.+4      	; 0x5f0 <__mulhisi3+0xa>
 5ec:	8a 1b       	sub	r24, r26
 5ee:	9b 0b       	sbc	r25, r27
 5f0:	10 c0       	rjmp	.+32     	; 0x612 <__usmulhisi3_tail>

000005f2 <__umulhisi3>:
 5f2:	a2 9f       	mul	r26, r18
 5f4:	b0 01       	movw	r22, r0
 5f6:	b3 9f       	mul	r27, r19
 5f8:	c0 01       	movw	r24, r0
 5fa:	a3 9f       	mul	r26, r19
 5fc:	70 0d       	add	r23, r0
 5fe:	81 1d       	adc	r24, r1
 600:	11 24       	eor	r1, r1
 602:	91 1d       	adc	r25, r1
 604:	b2 9f       	mul	r27, r18
 606:	70 0d       	add	r23, r0
 608:	81 1d       	adc	r24, r1
 60a:	11 24       	eor	r1, r1
 60c:	91 1d       	adc	r25, r1
 60e:	08 95       	ret

00000610 <__usmulhisi3>:
 610:	f0 df       	rcall	.-32     	; 0x5f2 <__umulhisi3>

00000612 <__usmulhisi3_tail>:
 612:	b7 ff       	sbrs	r27, 7
 614:	08 95       	ret
 616:	82 1b       	sub	r24, r18
 618:	93 0b       	sbc	r25, r19
 61a:	08 95       	ret

0000061c <__itoa_ncheck>:
 61c:	bb 27       	eor	r27, r27
 61e:	4a 30       	cpi	r20, 0x0A	; 10
 620:	31 f4       	brne	.+12     	; 0x62e <__itoa_ncheck+0x12>
 622:	99 23       	and	r25, r25
 624:	22 f4       	brpl	.+8      	; 0x62e <__itoa_ncheck+0x12>
 626:	bd e2       	ldi	r27, 0x2D	; 45
 628:	90 95       	com	r25
 62a:	81 95       	neg	r24
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	01 c0       	rjmp	.+2      	; 0x632 <__utoa_common>

00000630 <__utoa_ncheck>:
 630:	bb 27       	eor	r27, r27

00000632 <__utoa_common>:
 632:	fb 01       	movw	r30, r22
 634:	55 27       	eor	r21, r21
 636:	aa 27       	eor	r26, r26
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	aa 1f       	adc	r26, r26
 63e:	a4 17       	cp	r26, r20
 640:	10 f0       	brcs	.+4      	; 0x646 <__utoa_common+0x14>
 642:	a4 1b       	sub	r26, r20
 644:	83 95       	inc	r24
 646:	50 51       	subi	r21, 0x10	; 16
 648:	b9 f7       	brne	.-18     	; 0x638 <__utoa_common+0x6>
 64a:	a0 5d       	subi	r26, 0xD0	; 208
 64c:	aa 33       	cpi	r26, 0x3A	; 58
 64e:	08 f0       	brcs	.+2      	; 0x652 <__utoa_common+0x20>
 650:	a9 5d       	subi	r26, 0xD9	; 217
 652:	a1 93       	st	Z+, r26
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	79 f7       	brne	.-34     	; 0x636 <__utoa_common+0x4>
 658:	b1 11       	cpse	r27, r1
 65a:	b1 93       	st	Z+, r27
 65c:	11 92       	st	Z+, r1
 65e:	cb 01       	movw	r24, r22
 660:	00 c0       	rjmp	.+0      	; 0x662 <strrev>

00000662 <strrev>:
 662:	dc 01       	movw	r26, r24
 664:	fc 01       	movw	r30, r24
 666:	67 2f       	mov	r22, r23
 668:	71 91       	ld	r23, Z+
 66a:	77 23       	and	r23, r23
 66c:	e1 f7       	brne	.-8      	; 0x666 <strrev+0x4>
 66e:	32 97       	sbiw	r30, 0x02	; 2
 670:	04 c0       	rjmp	.+8      	; 0x67a <strrev+0x18>
 672:	7c 91       	ld	r23, X
 674:	6d 93       	st	X+, r22
 676:	70 83       	st	Z, r23
 678:	62 91       	ld	r22, -Z
 67a:	ae 17       	cp	r26, r30
 67c:	bf 07       	cpc	r27, r31
 67e:	c8 f3       	brcs	.-14     	; 0x672 <strrev+0x10>
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>


EMG_AMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c3  00800200  00800200  00000bb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022f6  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001039  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d61  00000000  00000000  00004073  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00004dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000858  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc0  00000000  00000000  00005938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000065f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	c8 c2       	rjmp	.+1424   	; 0x606 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	25 e0       	ldi	r18, 0x05	; 5
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 3c       	cpi	r26, 0xC3	; 195
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	1d d3       	rcall	.+1594   	; 0x740 <main>
 106:	1a c5       	rjmp	.+2612   	; 0xb3c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <pulseWR>:
void InterfacePixelFormat(unsigned char parameter)
{
}

void MemoryWrite()
{
 10a:	84 b3       	in	r24, 0x14	; 20
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	84 bb       	out	0x14, r24	; 20
 110:	84 b3       	in	r24, 0x14	; 20
 112:	84 60       	ori	r24, 0x04	; 4
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret

00000118 <WriteCommand>:
 118:	88 b9       	out	0x08, r24	; 8
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	84 b3       	in	r24, 0x14	; 20
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	84 bb       	out	0x14, r24	; 20
 126:	f1 df       	rcall	.-30     	; 0x10a <pulseWR>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <WriteData>:
 12c:	92 b9       	out	0x02, r25	; 2
 12e:	88 b9       	out	0x08, r24	; 8
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	80 68       	ori	r24, 0x80	; 128
 134:	8b b9       	out	0x0b, r24	; 11
 136:	84 b3       	in	r24, 0x14	; 20
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	84 bb       	out	0x14, r24	; 20
 13c:	e6 df       	rcall	.-52     	; 0x10a <pulseWR>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <DisplayInit>:
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	81 b9       	out	0x01, r24	; 1
 146:	87 b9       	out	0x07, r24	; 7
 148:	83 b3       	in	r24, 0x13	; 19
 14a:	87 60       	ori	r24, 0x07	; 7
 14c:	83 bb       	out	0x13, r24	; 19
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	80 68       	ori	r24, 0x80	; 128
 152:	8a b9       	out	0x0a, r24	; 10
 154:	84 b3       	in	r24, 0x14	; 20
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	84 bb       	out	0x14, r24	; 20
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	80 e7       	ldi	r24, 0x70	; 112
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <DisplayInit+0x1e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <DisplayInit+0x28>
 16a:	00 00       	nop
 16c:	84 b3       	in	r24, 0x14	; 20
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	84 bb       	out	0x14, r24	; 20
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	8b ed       	ldi	r24, 0xDB	; 219
 176:	95 e0       	ldi	r25, 0x05	; 5
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <DisplayInit+0x36>
 180:	00 c0       	rjmp	.+0      	; 0x182 <DisplayInit+0x40>
 182:	00 00       	nop
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	c8 df       	rcall	.-112    	; 0x118 <WriteCommand>
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	9e e4       	ldi	r25, 0x4E	; 78
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <DisplayInit+0x4a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <DisplayInit+0x50>
 192:	00 00       	nop
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	c0 df       	rcall	.-128    	; 0x118 <WriteCommand>
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	be df       	rcall	.-132    	; 0x118 <WriteCommand>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	c5 df       	rcall	.-118    	; 0x12c <WriteData>
 1a2:	81 ec       	ldi	r24, 0xC1	; 193
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	c2 df       	rcall	.-124    	; 0x12c <WriteData>
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	bf df       	rcall	.-130    	; 0x12c <WriteData>
 1ae:	8d ee       	ldi	r24, 0xED	; 237
 1b0:	b3 df       	rcall	.-154    	; 0x118 <WriteCommand>
 1b2:	84 e6       	ldi	r24, 0x64	; 100
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	ba df       	rcall	.-140    	; 0x12c <WriteData>
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	b7 df       	rcall	.-146    	; 0x12c <WriteData>
 1be:	82 e1       	ldi	r24, 0x12	; 18
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	b4 df       	rcall	.-152    	; 0x12c <WriteData>
 1c4:	81 e8       	ldi	r24, 0x81	; 129
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	b1 df       	rcall	.-158    	; 0x12c <WriteData>
 1ca:	88 ee       	ldi	r24, 0xE8	; 232
 1cc:	a5 df       	rcall	.-182    	; 0x118 <WriteCommand>
 1ce:	85 e8       	ldi	r24, 0x85	; 133
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac df       	rcall	.-168    	; 0x12c <WriteData>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	a9 df       	rcall	.-174    	; 0x12c <WriteData>
 1da:	88 e7       	ldi	r24, 0x78	; 120
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	a6 df       	rcall	.-180    	; 0x12c <WriteData>
 1e0:	8b ec       	ldi	r24, 0xCB	; 203
 1e2:	9a df       	rcall	.-204    	; 0x118 <WriteCommand>
 1e4:	89 e3       	ldi	r24, 0x39	; 57
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	a1 df       	rcall	.-190    	; 0x12c <WriteData>
 1ea:	8c e2       	ldi	r24, 0x2C	; 44
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9e df       	rcall	.-196    	; 0x12c <WriteData>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9b df       	rcall	.-202    	; 0x12c <WriteData>
 1f6:	84 e3       	ldi	r24, 0x34	; 52
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	98 df       	rcall	.-208    	; 0x12c <WriteData>
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	95 df       	rcall	.-214    	; 0x12c <WriteData>
 202:	87 ef       	ldi	r24, 0xF7	; 247
 204:	89 df       	rcall	.-238    	; 0x118 <WriteCommand>
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 df       	rcall	.-224    	; 0x12c <WriteData>
 20c:	8a ee       	ldi	r24, 0xEA	; 234
 20e:	84 df       	rcall	.-248    	; 0x118 <WriteCommand>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	8b df       	rcall	.-234    	; 0x12c <WriteData>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	88 df       	rcall	.-240    	; 0x12c <WriteData>
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	7c df       	rcall	.-264    	; 0x118 <WriteCommand>
 220:	83 e2       	ldi	r24, 0x23	; 35
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	83 df       	rcall	.-250    	; 0x12c <WriteData>
 226:	81 ec       	ldi	r24, 0xC1	; 193
 228:	77 df       	rcall	.-274    	; 0x118 <WriteCommand>
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	7e df       	rcall	.-260    	; 0x12c <WriteData>
 230:	85 ec       	ldi	r24, 0xC5	; 197
 232:	72 df       	rcall	.-284    	; 0x118 <WriteCommand>
 234:	8e e3       	ldi	r24, 0x3E	; 62
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	79 df       	rcall	.-270    	; 0x12c <WriteData>
 23a:	88 e2       	ldi	r24, 0x28	; 40
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	76 df       	rcall	.-276    	; 0x12c <WriteData>
 240:	87 ec       	ldi	r24, 0xC7	; 199
 242:	6a df       	rcall	.-300    	; 0x118 <WriteCommand>
 244:	86 e8       	ldi	r24, 0x86	; 134
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	71 df       	rcall	.-286    	; 0x12c <WriteData>
 24a:	86 e3       	ldi	r24, 0x36	; 54
 24c:	65 df       	rcall	.-310    	; 0x118 <WriteCommand>
 24e:	88 e4       	ldi	r24, 0x48	; 72
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	6c df       	rcall	.-296    	; 0x12c <WriteData>
 254:	8a e3       	ldi	r24, 0x3A	; 58
 256:	60 df       	rcall	.-320    	; 0x118 <WriteCommand>
 258:	85 e5       	ldi	r24, 0x55	; 85
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	67 df       	rcall	.-306    	; 0x12c <WriteData>
 25e:	81 eb       	ldi	r24, 0xB1	; 177
 260:	5b df       	rcall	.-330    	; 0x118 <WriteCommand>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	62 df       	rcall	.-316    	; 0x12c <WriteData>
 268:	88 e1       	ldi	r24, 0x18	; 24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	5f df       	rcall	.-322    	; 0x12c <WriteData>
 26e:	86 eb       	ldi	r24, 0xB6	; 182
 270:	53 df       	rcall	.-346    	; 0x118 <WriteCommand>
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	5a df       	rcall	.-332    	; 0x12c <WriteData>
 278:	82 e8       	ldi	r24, 0x82	; 130
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	57 df       	rcall	.-338    	; 0x12c <WriteData>
 27e:	87 e2       	ldi	r24, 0x27	; 39
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	54 df       	rcall	.-344    	; 0x12c <WriteData>
 284:	82 ef       	ldi	r24, 0xF2	; 242
 286:	48 df       	rcall	.-368    	; 0x118 <WriteCommand>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	4f df       	rcall	.-354    	; 0x12c <WriteData>
 28e:	86 e2       	ldi	r24, 0x26	; 38
 290:	43 df       	rcall	.-378    	; 0x118 <WriteCommand>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	4a df       	rcall	.-364    	; 0x12c <WriteData>
 298:	80 ee       	ldi	r24, 0xE0	; 224
 29a:	3e df       	rcall	.-388    	; 0x118 <WriteCommand>
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	45 df       	rcall	.-374    	; 0x12c <WriteData>
 2a2:	81 e3       	ldi	r24, 0x31	; 49
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	42 df       	rcall	.-380    	; 0x12c <WriteData>
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	3f df       	rcall	.-386    	; 0x12c <WriteData>
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	3c df       	rcall	.-392    	; 0x12c <WriteData>
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	39 df       	rcall	.-398    	; 0x12c <WriteData>
 2ba:	88 e0       	ldi	r24, 0x08	; 8
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	36 df       	rcall	.-404    	; 0x12c <WriteData>
 2c0:	8e e4       	ldi	r24, 0x4E	; 78
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	33 df       	rcall	.-410    	; 0x12c <WriteData>
 2c6:	81 ef       	ldi	r24, 0xF1	; 241
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	30 df       	rcall	.-416    	; 0x12c <WriteData>
 2cc:	87 e3       	ldi	r24, 0x37	; 55
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2d df       	rcall	.-422    	; 0x12c <WriteData>
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	2a df       	rcall	.-428    	; 0x12c <WriteData>
 2d8:	80 e1       	ldi	r24, 0x10	; 16
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	27 df       	rcall	.-434    	; 0x12c <WriteData>
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	24 df       	rcall	.-440    	; 0x12c <WriteData>
 2e4:	8e e0       	ldi	r24, 0x0E	; 14
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	21 df       	rcall	.-446    	; 0x12c <WriteData>
 2ea:	89 e0       	ldi	r24, 0x09	; 9
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	1e df       	rcall	.-452    	; 0x12c <WriteData>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	1b df       	rcall	.-458    	; 0x12c <WriteData>
 2f6:	81 ee       	ldi	r24, 0xE1	; 225
 2f8:	0f df       	rcall	.-482    	; 0x118 <WriteCommand>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	16 df       	rcall	.-468    	; 0x12c <WriteData>
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	13 df       	rcall	.-474    	; 0x12c <WriteData>
 306:	84 e1       	ldi	r24, 0x14	; 20
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	10 df       	rcall	.-480    	; 0x12c <WriteData>
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0d df       	rcall	.-486    	; 0x12c <WriteData>
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0a df       	rcall	.-492    	; 0x12c <WriteData>
 318:	87 e0       	ldi	r24, 0x07	; 7
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	07 df       	rcall	.-498    	; 0x12c <WriteData>
 31e:	81 e3       	ldi	r24, 0x31	; 49
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	04 df       	rcall	.-504    	; 0x12c <WriteData>
 324:	81 ec       	ldi	r24, 0xC1	; 193
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	01 df       	rcall	.-510    	; 0x12c <WriteData>
 32a:	88 e4       	ldi	r24, 0x48	; 72
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fe de       	rcall	.-516    	; 0x12c <WriteData>
 330:	88 e0       	ldi	r24, 0x08	; 8
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	fb de       	rcall	.-522    	; 0x12c <WriteData>
 336:	8f e0       	ldi	r24, 0x0F	; 15
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	f8 de       	rcall	.-528    	; 0x12c <WriteData>
 33c:	8c e0       	ldi	r24, 0x0C	; 12
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	f5 de       	rcall	.-534    	; 0x12c <WriteData>
 342:	81 e3       	ldi	r24, 0x31	; 49
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	f2 de       	rcall	.-540    	; 0x12c <WriteData>
 348:	86 e3       	ldi	r24, 0x36	; 54
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ef de       	rcall	.-546    	; 0x12c <WriteData>
 34e:	8f e0       	ldi	r24, 0x0F	; 15
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	ec de       	rcall	.-552    	; 0x12c <WriteData>
 354:	81 e1       	ldi	r24, 0x11	; 17
 356:	e0 de       	rcall	.-576    	; 0x118 <WriteCommand>
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	2b ed       	ldi	r18, 0xDB	; 219
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	20 40       	sbci	r18, 0x00	; 0
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <DisplayInit+0x21c>
 366:	00 c0       	rjmp	.+0      	; 0x368 <DisplayInit+0x226>
 368:	00 00       	nop
 36a:	89 e2       	ldi	r24, 0x29	; 41
 36c:	d5 de       	rcall	.-598    	; 0x118 <WriteCommand>
 36e:	8c e2       	ldi	r24, 0x2C	; 44
 370:	d3 ce       	rjmp	.-602    	; 0x118 <WriteCommand>
 372:	08 95       	ret

00000374 <WritePixel>:
}

// Red 0-31, Green 0-63, Blue 0-31
void WritePixel(unsigned char Red, unsigned char Green, unsigned char Blue){
	// Convert 5-6-5 RGB to 16-bit value
	uint16_t color = (Red << 11) | (Green << 5) | Blue;
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 2f       	mov	r25, r24
 378:	88 27       	eor	r24, r24
 37a:	99 0f       	add	r25, r25
 37c:	99 0f       	add	r25, r25
 37e:	99 0f       	add	r25, r25
 380:	20 e2       	ldi	r18, 0x20	; 32
 382:	62 9f       	mul	r22, r18
 384:	b0 01       	movw	r22, r0
 386:	11 24       	eor	r1, r1
 388:	86 2b       	or	r24, r22
 38a:	97 2b       	or	r25, r23
	WriteData(color);
 38c:	84 2b       	or	r24, r20
 38e:	ce ce       	rjmp	.-612    	; 0x12c <WriteData>
 390:	08 95       	ret

00000392 <SetColumnAddress>:

	// 6. Turn on display
	WriteCommand(0x29);

	// 7. Ready for pixel writing
	WriteCommand(0x2C);
 392:	0f 93       	push	r16
	uint16_t color = (Red << 11) | (Green << 5) | Blue;
	WriteData(color);
}

// Set Column Address (0-239), Start > End
void SetColumnAddress(uint16_t Start, uint16_t End){
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	8c 01       	movw	r16, r24
 39c:	eb 01       	movw	r28, r22
	WriteCommand(0x2A); // Column address set
 39e:	8a e2       	ldi	r24, 0x2A	; 42
 3a0:	bb de       	rcall	.-650    	; 0x118 <WriteCommand>

	WriteData((Start >> 8) & 0xFF); // Start high byte
 3a2:	81 2f       	mov	r24, r17
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	c2 de       	rcall	.-636    	; 0x12c <WriteData>
	WriteData(Start & 0xFF);        // Start low byte
 3a8:	c8 01       	movw	r24, r16
 3aa:	99 27       	eor	r25, r25
 3ac:	bf de       	rcall	.-642    	; 0x12c <WriteData>

	WriteData((End >> 8) & 0xFF);   // End high byte
 3ae:	8d 2f       	mov	r24, r29
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	bc de       	rcall	.-648    	; 0x12c <WriteData>
	WriteData(End & 0xFF);          // End low byte
 3b4:	ce 01       	movw	r24, r28
 3b6:	99 27       	eor	r25, r25
 3b8:	b9 de       	rcall	.-654    	; 0x12c <WriteData>
 3ba:	df 91       	pop	r29
}
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <SetPageAddress>:
 3c4:	0f 93       	push	r16

// Set Page Address (0-319), Start > End
void SetPageAddress(uint16_t Start, uint16_t End){
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	8c 01       	movw	r16, r24
 3ce:	eb 01       	movw	r28, r22
	WriteCommand(0x2B); // Page address set
 3d0:	8b e2       	ldi	r24, 0x2B	; 43
 3d2:	a2 de       	rcall	.-700    	; 0x118 <WriteCommand>

	WriteData((Start >> 8) & 0xFF); // Start high byte
 3d4:	81 2f       	mov	r24, r17
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	a9 de       	rcall	.-686    	; 0x12c <WriteData>
	WriteData(Start & 0xFF);        // Start low byte
 3da:	c8 01       	movw	r24, r16
 3dc:	99 27       	eor	r25, r25
 3de:	a6 de       	rcall	.-692    	; 0x12c <WriteData>

	WriteData((End >> 8) & 0xFF);   // End high byte
 3e0:	8d 2f       	mov	r24, r29
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	a3 de       	rcall	.-698    	; 0x12c <WriteData>
	WriteData(End & 0xFF);          // End low byte
 3e6:	ce 01       	movw	r24, r28
 3e8:	99 27       	eor	r25, r25
 3ea:	a0 de       	rcall	.-704    	; 0x12c <WriteData>
 3ec:	df 91       	pop	r29
}
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <BackgroundColor>:
 3f6:	cf 92       	push	r12

void BackgroundColor(uint8_t Red, uint8_t Green, uint8_t Blue)
{
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
	uint16_t color = (Red << 11) | (Green << 5) | Blue;
 402:	c8 2f       	mov	r28, r24
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	dc 2f       	mov	r29, r28
 408:	cc 27       	eor	r28, r28
 40a:	dd 0f       	add	r29, r29
 40c:	dd 0f       	add	r29, r29
 40e:	dd 0f       	add	r29, r29
 410:	20 e2       	ldi	r18, 0x20	; 32
 412:	62 9f       	mul	r22, r18
 414:	c0 01       	movw	r24, r0
 416:	11 24       	eor	r1, r1
 418:	c8 2b       	or	r28, r24
 41a:	d9 2b       	or	r29, r25
 41c:	c4 2b       	or	r28, r20

	SetColumnAddress(0, 239);
 41e:	6f ee       	ldi	r22, 0xEF	; 239
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	b5 df       	rcall	.-150    	; 0x392 <SetColumnAddress>
	SetPageAddress(0, 319);
 428:	6f e3       	ldi	r22, 0x3F	; 63
 42a:	71 e0       	ldi	r23, 0x01	; 1
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	c9 df       	rcall	.-110    	; 0x3c4 <SetPageAddress>
	WriteCommand(0x2C);  // Memory Write
 432:	8c e2       	ldi	r24, 0x2C	; 44
 434:	71 de       	rcall	.-798    	; 0x118 <WriteCommand>
 436:	c1 2c       	mov	r12, r1

	for (uint32_t i = 0; i < 240UL * 320UL; i++)
 438:	d1 2c       	mov	r13, r1
 43a:	76 01       	movw	r14, r12
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		WriteData(color);
 43e:	ce 01       	movw	r24, r28
 440:	75 de       	rcall	.-790    	; 0x12c <WriteData>
 442:	8f ef       	ldi	r24, 0xFF	; 255

	SetColumnAddress(0, 239);
	SetPageAddress(0, 319);
	WriteCommand(0x2C);  // Memory Write

	for (uint32_t i = 0; i < 240UL * 320UL; i++)
 444:	c8 1a       	sub	r12, r24
 446:	d8 0a       	sbc	r13, r24
 448:	e8 0a       	sbc	r14, r24
 44a:	f8 0a       	sbc	r15, r24
 44c:	c1 14       	cp	r12, r1
 44e:	2c e2       	ldi	r18, 0x2C	; 44
 450:	d2 06       	cpc	r13, r18
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	e2 06       	cpc	r14, r18
 456:	f1 04       	cpc	r15, r1
 458:	90 f3       	brcs	.-28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 45a:	df 91       	pop	r29
	{
		WriteData(color);
	}
}
 45c:	cf 91       	pop	r28
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	08 95       	ret

00000468 <DrawVerticalLine>:
 468:	cf 92       	push	r12

void DrawVerticalLine(uint16_t x, uint16_t y_start, uint16_t y_end, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	eb 01       	movw	r28, r22
 478:	6a 01       	movw	r12, r20
 47a:	12 2f       	mov	r17, r18
	SetColumnAddress(x, x);
 47c:	bc 01       	movw	r22, r24
 47e:	89 df       	rcall	.-238    	; 0x392 <SetColumnAddress>
	SetPageAddress(y_start, y_end);
 480:	b6 01       	movw	r22, r12
 482:	ce 01       	movw	r24, r28
 484:	9f df       	rcall	.-194    	; 0x3c4 <SetPageAddress>
	WriteCommand(0x2C);  // Memory Write
 486:	8c e2       	ldi	r24, 0x2C	; 44
 488:	47 de       	rcall	.-882    	; 0x118 <WriteCommand>
 48a:	05 c0       	rjmp	.+10     	; 0x496 <DrawVerticalLine+0x2e>

	for (uint16_t y = y_start; y <= y_end; y++)
 48c:	4e 2d       	mov	r20, r14
	{
		WritePixel(Red, Green, Blue);
 48e:	60 2f       	mov	r22, r16
 490:	81 2f       	mov	r24, r17
 492:	70 df       	rcall	.-288    	; 0x374 <WritePixel>
 494:	21 96       	adiw	r28, 0x01	; 1
{
	SetColumnAddress(x, x);
	SetPageAddress(y_start, y_end);
	WriteCommand(0x2C);  // Memory Write

	for (uint16_t y = y_start; y <= y_end; y++)
 496:	cc 16       	cp	r12, r28
 498:	dd 06       	cpc	r13, r29
 49a:	c0 f7       	brcc	.-16     	; 0x48c <DrawVerticalLine+0x24>
 49c:	df 91       	pop	r29
	{
		WritePixel(Red, Green, Blue);
	}
}
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	08 95       	ret

000004ac <DrawHorizontalLine>:
 4ac:	af 92       	push	r10

void DrawHorizontalLine(uint16_t y, uint16_t x_start, uint16_t x_end, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 4ae:	bf 92       	push	r11
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	5c 01       	movw	r10, r24
 4c0:	eb 01       	movw	r28, r22
 4c2:	6a 01       	movw	r12, r20
 4c4:	12 2f       	mov	r17, r18
	SetColumnAddress(x_start, x_end);
 4c6:	ba 01       	movw	r22, r20
 4c8:	ce 01       	movw	r24, r28
 4ca:	63 df       	rcall	.-314    	; 0x392 <SetColumnAddress>
	SetPageAddress(y, y);
 4cc:	b5 01       	movw	r22, r10
 4ce:	c5 01       	movw	r24, r10
 4d0:	79 df       	rcall	.-270    	; 0x3c4 <SetPageAddress>
	WriteCommand(0x2C);  // Memory Write
 4d2:	8c e2       	ldi	r24, 0x2C	; 44
 4d4:	21 de       	rcall	.-958    	; 0x118 <WriteCommand>
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <DrawHorizontalLine+0x36>

	for (uint16_t x = x_start; x <= x_end; x++)
 4d8:	4e 2d       	mov	r20, r14
	{
		WritePixel(Red, Green, Blue);
 4da:	60 2f       	mov	r22, r16
 4dc:	81 2f       	mov	r24, r17
 4de:	4a df       	rcall	.-364    	; 0x374 <WritePixel>
 4e0:	21 96       	adiw	r28, 0x01	; 1
{
	SetColumnAddress(x_start, x_end);
	SetPageAddress(y, y);
	WriteCommand(0x2C);  // Memory Write

	for (uint16_t x = x_start; x <= x_end; x++)
 4e2:	cc 16       	cp	r12, r28
 4e4:	dd 06       	cpc	r13, r29
 4e6:	c0 f7       	brcc	.-16     	; 0x4d8 <DrawHorizontalLine+0x2c>
 4e8:	df 91       	pop	r29
	{
		WritePixel(Red, Green, Blue);
	}
}
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	bf 90       	pop	r11
 4f8:	af 90       	pop	r10
 4fa:	08 95       	ret

000004fc <InitCoordinate>:
 4fc:	ef 92       	push	r14

void InitCoordinate() {
 4fe:	0f 93       	push	r16
	// 1. Fill screen with white (RGB = 255, 255, 255)
	BackgroundColor(31, 63, 31);  // Max R, G, B for RGB565 white
 500:	4f e1       	ldi	r20, 0x1F	; 31
 502:	6f e3       	ldi	r22, 0x3F	; 63
 504:	8f e1       	ldi	r24, 0x1F	; 31
 506:	77 df       	rcall	.-274    	; 0x3f6 <BackgroundColor>

	// 2. Draw vertical black line (R=0, G=0, B=0)
	DrawVerticalLine(120, 0, 319, 0, 0, 0);  // Center X
 508:	e1 2c       	mov	r14, r1
 50a:	00 e0       	ldi	r16, 0x00	; 0
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	4f e3       	ldi	r20, 0x3F	; 63
 510:	51 e0       	ldi	r21, 0x01	; 1
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	88 e7       	ldi	r24, 0x78	; 120
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a6 df       	rcall	.-180    	; 0x468 <DrawVerticalLine>

	// 3. Draw horizontal black line
	DrawHorizontalLine(260, 0, 239, 0, 0, 0);  // Center Y
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	4f ee       	ldi	r20, 0xEF	; 239
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	c0 df       	rcall	.-128    	; 0x4ac <DrawHorizontalLine>
}
 52c:	0f 91       	pop	r16
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <DrawEMG>:

void DrawEMG(uint8_t sample, uint16_t x)
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	eb 01       	movw	r28, r22
	// Map 0–255 sample to Y screen coordinate (0 = bottom, 239 = top)
	// 239 - (sample * 240 / 256) flips Y axis (so 0 = bottom)
	uint16_t y = 239 - ((sample * 240UL) / 256);
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	a0 ef       	ldi	r26, 0xF0	; 240
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	ab d2       	rcall	.+1366   	; 0xa98 <__umulhisi3>
 542:	47 2f       	mov	r20, r23
 544:	58 2f       	mov	r21, r24
 546:	69 2f       	mov	r22, r25
 548:	77 27       	eor	r23, r23
 54a:	8f ee       	ldi	r24, 0xEF	; 239
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	84 1b       	sub	r24, r20
 550:	95 0b       	sbc	r25, r21

	SetColumnAddress(y, y);
 552:	bc 01       	movw	r22, r24
 554:	1e df       	rcall	.-452    	; 0x392 <SetColumnAddress>
	SetPageAddress(x,x);
 556:	be 01       	movw	r22, r28
 558:	ce 01       	movw	r24, r28
	WriteCommand(0x2C);  // Memory Write
 55a:	34 df       	rcall	.-408    	; 0x3c4 <SetPageAddress>
 55c:	8c e2       	ldi	r24, 0x2C	; 44
	WritePixel(31, 0, 0);  // Dark blue pixel
 55e:	dc dd       	rcall	.-1096   	; 0x118 <WriteCommand>
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	8f e1       	ldi	r24, 0x1F	; 31
 566:	06 df       	rcall	.-500    	; 0x374 <WritePixel>
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <USART0_Init>:

// Initializes USART
void USART0_Init(unsigned int ubrr) {
	
	// Need to set the Baud rate registers for USART
	UBRR0H = (unsigned char)(ubrr >> 8); // Holds high byte (15-8)
 56e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr; // Holds low byte (7-0)
 572:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0B = (1 << TXEN0); // UCSR0B is USART control and status register B, (1<<TXEN0) enables transmission
 576:	88 e0       	ldi	r24, 0x08	; 8
 578:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // UCSR0C is USART control and status register C, this sets USART to 8-bit mode, USBS0=0 mean 1 stop bit {8N1 mode}
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 582:	08 95       	ret

00000584 <USART0_Transmit>:
}

// Transmits 1 byte of data
void USART0_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0))); // Loops until UDRE0 in UCSR0A becomes 1 (When UDRE0=1, status flag is low, we can transmit again)
 584:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 588:	95 ff       	sbrs	r25, 5
 58a:	fc cf       	rjmp	.-8      	; 0x584 <USART0_Transmit>
	UDR0 = data; // Set send/receive USART register to data
 58c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 590:	08 95       	ret

00000592 <USART0_SendString>:
}

void USART0_SendString(const char *str) {
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
	while (*str) USART0_Transmit(*str++); // While characters in string (*str) to transmit, send character, in C strings are null-terminated.
 598:	02 c0       	rjmp	.+4      	; 0x59e <USART0_SendString+0xc>
 59a:	21 96       	adiw	r28, 0x01	; 1
 59c:	f3 df       	rcall	.-26     	; 0x584 <USART0_Transmit>
 59e:	88 81       	ld	r24, Y
 5a0:	81 11       	cpse	r24, r1
 5a2:	fb cf       	rjmp	.-10     	; 0x59a <USART0_SendString+0x8>
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <pwm_init>:
volatile uint8_t emg_buffer_full = 0;			// Flag for when sample buffer is full and calculations should be triggered


void pwm_init(void) {
	// Set PH5 (OC4C, Arduino Pin 8) as output
	DDRH |= (1 << PH5);
 5aa:	e1 e0       	ldi	r30, 0x01	; 1
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
 5ae:	80 81       	ld	r24, Z
 5b0:	80 62       	ori	r24, 0x20	; 32
 5b2:	80 83       	st	Z, r24

	// Fast PWM with ICR4 as TOP, non-inverted PWM on OC4C
	TCCR4A = (1 << COM4C1);              // Clear OC4C on Compare Match
 5b4:	88 e0       	ldi	r24, 0x08	; 8
 5b6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = (1 << WGM43) | (1 << WGM42) // Fast PWM, mode 14 (ICR TOP)
 5ba:	8b e1       	ldi	r24, 0x1B	; 27
 5bc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	| (1 << CS41) | (1 << CS40);  // Prescaler 64

	ICR4 = 4999;  // TOP ? 50 Hz PWM
 5c0:	87 e8       	ldi	r24, 0x87	; 135
 5c2:	93 e1       	ldi	r25, 0x13	; 19
 5c4:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7c00a7>
 5c8:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7c00a6>
 5cc:	08 95       	ret

000005ce <pwm_set_duty>:
}


void pwm_set_duty(uint16_t duty_percent) {
	OCR4C = (uint32_t)ICR4 * duty_percent / 100;
 5ce:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7c00a6>
 5d2:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7c00a7>
 5d6:	dc 01       	movw	r26, r24
 5d8:	5f d2       	rcall	.+1214   	; 0xa98 <__umulhisi3>
 5da:	24 e6       	ldi	r18, 0x64	; 100
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	32 d2       	rcall	.+1124   	; 0xa48 <__udivmodsi4>
 5e4:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
 5e8:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
 5ec:	08 95       	ret

000005ee <adc_init>:


/*******************************************************ADC*************************************************************/
// Initializes ADC
void adc_init(void) {
	ADMUX  = (1 << REFS0);									// AVcc as ref
 5ee:	80 e4       	ldi	r24, 0x40	; 64
 5f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN)  | (1 << ADIE)						// Enable ADC + interrupt
 5f4:	ea e7       	ldi	r30, 0x7A	; 122
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	8f e8       	ldi	r24, 0x8F	; 143
 5fa:	80 83       	st	Z, r24
		   | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Prescaler 128
	sei();													// Global interrupts on
 5fc:	78 94       	sei
	ADCSRA |= (1 << ADSC);									// Kick off first conversion
 5fe:	80 81       	ld	r24, Z
 600:	80 64       	ori	r24, 0x40	; 64
 602:	80 83       	st	Z, r24
 604:	08 95       	ret

00000606 <__vector_29>:
}
/***********************************************************************************************************************/

/*******************************************************ISR*************************************************************/
ISR(ADC_vect) {
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	0b b6       	in	r0, 0x3b	; 59
 612:	0f 92       	push	r0
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	emg_samples[emg_index++] = ADC;
 620:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <emg_index>
 624:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <emg_index+0x1>
 628:	9c 01       	movw	r18, r24
 62a:	2f 5f       	subi	r18, 0xFF	; 255
 62c:	3f 4f       	sbci	r19, 0xFF	; 255
 62e:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <emg_index+0x1>
 632:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <emg_index>
 636:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 63a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	fc 01       	movw	r30, r24
 644:	ed 5f       	subi	r30, 0xFD	; 253
 646:	fd 4f       	sbci	r31, 0xFD	; 253
 648:	31 83       	std	Z+1, r19	; 0x01
 64a:	20 83       	st	Z, r18

	if (emg_index >= BUFFER_SIZE) {
 64c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <emg_index>
 650:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <emg_index+0x1>
 654:	80 3e       	cpi	r24, 0xE0	; 224
 656:	91 40       	sbci	r25, 0x01	; 1
 658:	38 f0       	brcs	.+14     	; 0x668 <__vector_29+0x62>
		emg_index = 0;
 65a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <emg_index+0x1>
 65e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <emg_index>
		emg_buffer_full = 1;  // set flag to signal main
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}

	ADCSRA |= (1 << ADSC); // start next conversion
 668:	ea e7       	ldi	r30, 0x7A	; 122
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	80 64       	ori	r24, 0x40	; 64
 670:	80 83       	st	Z, r24
}
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0b be       	out	0x3b, r0	; 59
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <calculate_RMS>:
/***********************************************************************************************************************/

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {
 68c:	8f 92       	push	r8
 68e:	9f 92       	push	r9
 690:	af 92       	push	r10
 692:	bf 92       	push	r11
 694:	cf 92       	push	r12
 696:	df 92       	push	r13
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
	
	// Summing all samples in buffer
	uint32_t sum = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	90 e0       	ldi	r25, 0x00	; 0

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {
	
	// Summing all samples in buffer
	uint32_t sum = 0;
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	ba 01       	movw	r22, r20
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <calculate_RMS+0x34>
		sum += emg_samples[i];
 6a8:	fc 01       	movw	r30, r24
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	ed 5f       	subi	r30, 0xFD	; 253
 6b0:	fd 4f       	sbci	r31, 0xFD	; 253
 6b2:	20 81       	ld	r18, Z
 6b4:	31 81       	ldd	r19, Z+1	; 0x01
 6b6:	42 0f       	add	r20, r18
 6b8:	53 1f       	adc	r21, r19
 6ba:	61 1d       	adc	r22, r1
 6bc:	71 1d       	adc	r23, r1
/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {
	
	// Summing all samples in buffer
	uint32_t sum = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	80 3e       	cpi	r24, 0xE0	; 224
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	92 07       	cpc	r25, r18
 6c6:	80 f3       	brcs	.-32     	; 0x6a8 <calculate_RMS+0x1c>
		sum += emg_samples[i];
	}
	
	// Calculate mean
	uint16_t mean = sum / BUFFER_SIZE;
 6c8:	cb 01       	movw	r24, r22
 6ca:	ba 01       	movw	r22, r20
 6cc:	20 ee       	ldi	r18, 0xE0	; 224
 6ce:	31 e0       	ldi	r19, 0x01	; 1
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	b9 d1       	rcall	.+882    	; 0xa48 <__udivmodsi4>
 6d6:	49 01       	movw	r8, r18
 6d8:	5a 01       	movw	r10, r20
	
	// Subtract mean and calculate squares (Equivalent for mean of squares)
	uint32_t sum_squares = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	50 e0       	ldi	r21, 0x00	; 0
	
	// Calculate mean
	uint16_t mean = sum / BUFFER_SIZE;
	
	// Subtract mean and calculate squares (Equivalent for mean of squares)
	uint32_t sum_squares = 0;
 6de:	c1 2c       	mov	r12, r1
 6e0:	d1 2c       	mov	r13, r1
 6e2:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <calculate_RMS+0x7c>
		int16_t centered_sample = (int16_t)emg_samples[i] - (int16_t)mean;
 6e6:	fa 01       	movw	r30, r20
 6e8:	ee 0f       	add	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	ed 5f       	subi	r30, 0xFD	; 253
 6ee:	fd 4f       	sbci	r31, 0xFD	; 253
 6f0:	a0 81       	ld	r26, Z
 6f2:	b1 81       	ldd	r27, Z+1	; 0x01
 6f4:	a8 19       	sub	r26, r8
 6f6:	b9 09       	sbc	r27, r9
		sum_squares += (uint32_t)centered_sample * (uint32_t)centered_sample;
 6f8:	9d 01       	movw	r18, r26
 6fa:	c8 d1       	rcall	.+912    	; 0xa8c <__mulhisi3>
 6fc:	c6 0e       	add	r12, r22
 6fe:	d7 1e       	adc	r13, r23
 700:	e8 1e       	adc	r14, r24
 702:	f9 1e       	adc	r15, r25
	// Calculate mean
	uint16_t mean = sum / BUFFER_SIZE;
	
	// Subtract mean and calculate squares (Equivalent for mean of squares)
	uint32_t sum_squares = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 704:	4f 5f       	subi	r20, 0xFF	; 255
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	40 3e       	cpi	r20, 0xE0	; 224
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	58 07       	cpc	r21, r24
 70e:	58 f3       	brcs	.-42     	; 0x6e6 <calculate_RMS+0x5a>
		int16_t centered_sample = (int16_t)emg_samples[i] - (int16_t)mean;
		sum_squares += (uint32_t)centered_sample * (uint32_t)centered_sample;
	}

	uint32_t mean_square = sum_squares / BUFFER_SIZE;
 710:	c7 01       	movw	r24, r14
 712:	b6 01       	movw	r22, r12
 714:	20 ee       	ldi	r18, 0xE0	; 224
 716:	31 e0       	ldi	r19, 0x01	; 1
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	95 d1       	rcall	.+810    	; 0xa48 <__udivmodsi4>
 71e:	69 01       	movw	r12, r18
 720:	7a 01       	movw	r14, r20
	uint16_t rms = (uint16_t)sqrt((double)mean_square);
 722:	c7 01       	movw	r24, r14
 724:	b6 01       	movw	r22, r12
 726:	d0 d0       	rcall	.+416    	; 0x8c8 <__floatunsisf>
 728:	39 d1       	rcall	.+626    	; 0x99c <sqrt>
 72a:	a2 d0       	rcall	.+324    	; 0x870 <__fixunssfsi>
 72c:	cb 01       	movw	r24, r22

	return rms; 
}
 72e:	ff 90       	pop	r15
 730:	ef 90       	pop	r14
 732:	df 90       	pop	r13
 734:	cf 90       	pop	r12
 736:	bf 90       	pop	r11
 738:	af 90       	pop	r10
 73a:	9f 90       	pop	r9
 73c:	8f 90       	pop	r8
 73e:	08 95       	ret

00000740 <main>:
 740:	cf 93       	push	r28
/************************************************************************************************************************/

int main(void) {
 742:	df 93       	push	r29
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	2a 97       	sbiw	r28, 0x0a	; 10
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61

	USART0_Init(MYUBRR);
 754:	87 e6       	ldi	r24, 0x67	; 103
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0a df       	rcall	.-492    	; 0x56e <USART0_Init>
	adc_init();
 75a:	49 df       	rcall	.-366    	; 0x5ee <adc_init>
	pwm_init();
 75c:	26 df       	rcall	.-436    	; 0x5aa <pwm_init>
	DisplayInit();
 75e:	f1 dc       	rcall	.-1566   	; 0x142 <DisplayInit>
 760:	cd de       	rcall	.-614    	; 0x4fc <InitCoordinate>
	InitCoordinate();
 762:	84 b1       	in	r24, 0x04	; 4
 764:	80 68       	ori	r24, 0x80	; 128
	char buffer[10];  // Enough for millivolt values (max "5000\0")
	
	
	
	// Set pin 13 (PB7) as output for debugging (LED)
	DDRB |= (1 << PB7);
 766:	84 b9       	out	0x04, r24	; 4
 768:	c1 2c       	mov	r12, r1
 76a:	d1 2c       	mov	r13, r1

	uint16_t rms_adc = 0;
	uint32_t rms_mv = 0;
	uint16_t threshold = 200; //Threshold in mV for when to move motor
	uint16_t overThreshold = 0;
	uint16_t underThreshold = 0;
 76c:	e1 2c       	mov	r14, r1
 76e:	f1 2c       	mov	r15, r1
	uint16_t x = 319; // Start coordinate for x-axis (Helt til venstre)

	uint16_t rms_adc = 0;
	uint32_t rms_mv = 0;
	uint16_t threshold = 200; //Threshold in mV for when to move motor
	uint16_t overThreshold = 0;
 770:	0f e3       	ldi	r16, 0x3F	; 63
 772:	11 e0       	ldi	r17, 0x01	; 1
	adc_init();
	pwm_init();
	DisplayInit();
	InitCoordinate();
	
	uint16_t x = 319; // Start coordinate for x-axis (Helt til venstre)
 774:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	
	while (1) {

		// Check if EMG buffer is full (ISR sets this flag)
		if (emg_buffer_full) {
 778:	88 23       	and	r24, r24
 77a:	e1 f3       	breq	.-8      	; 0x774 <main+0x34>
 77c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			emg_buffer_full = 0;  // Clear flag

			// Calculate RMS from EMG samples buffer
			rms_adc = calculate_RMS();
 780:	85 df       	rcall	.-246    	; 0x68c <calculate_RMS>
 782:	9c 01       	movw	r18, r24

			// Convert ADC value to millivolts
			rms_mv = (uint32_t)rms_adc * VREF / 1023;
 784:	a8 e8       	ldi	r26, 0x88	; 136
 786:	b3 e1       	ldi	r27, 0x13	; 19
 788:	87 d1       	rcall	.+782    	; 0xa98 <__umulhisi3>
 78a:	2f ef       	ldi	r18, 0xFF	; 255
 78c:	33 e0       	ldi	r19, 0x03	; 3
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	5a d1       	rcall	.+692    	; 0xa48 <__udivmodsi4>
 794:	62 2e       	mov	r6, r18
 796:	73 2e       	mov	r7, r19
 798:	44 2e       	mov	r4, r20
 79a:	55 2e       	mov	r5, r21
 79c:	82 2e       	mov	r8, r18
 79e:	93 2e       	mov	r9, r19
 7a0:	a4 2e       	mov	r10, r20
 7a2:	b5 2e       	mov	r11, r21
 7a4:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7a6:	be 01       	movw	r22, r28
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	86 2d       	mov	r24, r6
 7ae:	97 2d       	mov	r25, r7
 7b0:	92 d1       	rcall	.+804    	; 0xad6 <__itoa_ncheck>

			// Convert rms_mv to string
			itoa(rms_mv, buffer, 10);  // Convert to decimal string

			USART0_SendString(buffer);
 7b2:	ce 01       	movw	r24, r28
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	ed de       	rcall	.-550    	; 0x592 <USART0_SendString>
			
			// Send newline
			USART0_Transmit('\n');
 7b8:	8a e0       	ldi	r24, 0x0A	; 10
 7ba:	e4 de       	rcall	.-568    	; 0x584 <USART0_Transmit>
 7bc:	af ee       	ldi	r26, 0xEF	; 239
			
			// Scale ADC output into TFT y-axis range
			uint16_t mapped_sample = ((rms_mv * 239UL) / 2000);
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	26 2d       	mov	r18, r6
 7c2:	37 2d       	mov	r19, r7
 7c4:	44 2d       	mov	r20, r4
 7c6:	55 2d       	mov	r21, r5
 7c8:	7c d1       	rcall	.+760    	; 0xac2 <__muluhisi3>
 7ca:	20 ed       	ldi	r18, 0xD0	; 208
 7cc:	37 e0       	ldi	r19, 0x07	; 7
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	3a d1       	rcall	.+628    	; 0xa48 <__udivmodsi4>
 7d4:	82 2f       	mov	r24, r18


			DrawEMG(mapped_sample, x);
 7d6:	b8 01       	movw	r22, r16
 7d8:	ac de       	rcall	.-680    	; 0x532 <DrawEMG>
 7da:	01 50       	subi	r16, 0x01	; 1

			x--;
 7dc:	11 09       	sbc	r17, r1
 7de:	19 f4       	brne	.+6      	; 0x7e6 <main+0xa6>
			if (x <= 0) {
 7e0:	8d de       	rcall	.-742    	; 0x4fc <InitCoordinate>
				x = 319;
				InitCoordinate(); // Clear and redraw axis
 7e2:	0f e3       	ldi	r16, 0x3F	; 63
 7e4:	11 e0       	ldi	r17, 0x01	; 1

			DrawEMG(mapped_sample, x);

			x--;
			if (x <= 0) {
				x = 319;
 7e6:	28 ec       	ldi	r18, 0xC8	; 200
 7e8:	82 16       	cp	r8, r18
				InitCoordinate(); // Clear and redraw axis
			}
			
			// If 50ms window RMS value above threshold
			if (rms_mv >= threshold) {
 7ea:	91 04       	cpc	r9, r1
 7ec:	a1 04       	cpc	r10, r1
 7ee:	b1 04       	cpc	r11, r1
 7f0:	d8 f0       	brcs	.+54     	; 0x828 <main+0xe8>
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
				overThreshold++;
 7f4:	e8 1a       	sub	r14, r24
 7f6:	f8 0a       	sbc	r15, r24
 7f8:	93 e0       	ldi	r25, 0x03	; 3
				
				if (overThreshold == 3) {
 7fa:	e9 16       	cp	r14, r25
 7fc:	f1 04       	cpc	r15, r1
 7fe:	a1 f4       	brne	.+40     	; 0x828 <main+0xe8>
 800:	85 b1       	in	r24, 0x05	; 5
					PORTB |= (1 << PB7); // Turn ON LED
 802:	80 68       	ori	r24, 0x80	; 128
 804:	85 b9       	out	0x05, r24	; 5
					pwm_set_duty(6);
 806:	86 e0       	ldi	r24, 0x06	; 6
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	e1 de       	rcall	.-574    	; 0x5ce <pwm_set_duty>
 80c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 80e:	89 e6       	ldi	r24, 0x69	; 105
 810:	98 e1       	ldi	r25, 0x18	; 24
 812:	21 50       	subi	r18, 0x01	; 1
 814:	80 40       	sbci	r24, 0x00	; 0
 816:	90 40       	sbci	r25, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <main+0xd2>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <main+0xdc>
 81c:	00 00       	nop
 81e:	80 e0       	ldi	r24, 0x00	; 0
					_delay_ms(500);
					pwm_set_duty(0);
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	d5 de       	rcall	.-598    	; 0x5ce <pwm_set_duty>
 824:	c1 2c       	mov	r12, r1
 826:	d1 2c       	mov	r13, r1
					underThreshold = 0;
 828:	29 ec       	ldi	r18, 0xC9	; 201
 82a:	82 16       	cp	r8, r18
				}
			}

			// If 50ms window RMS value below threshold
			if (rms_mv <= threshold) {
 82c:	91 04       	cpc	r9, r1
 82e:	a1 04       	cpc	r10, r1
 830:	b1 04       	cpc	r11, r1
 832:	08 f0       	brcs	.+2      	; 0x836 <main+0xf6>
 834:	9f cf       	rjmp	.-194    	; 0x774 <main+0x34>
 836:	8f ef       	ldi	r24, 0xFF	; 255
				underThreshold++;
 838:	c8 1a       	sub	r12, r24
 83a:	d8 0a       	sbc	r13, r24
 83c:	95 e0       	ldi	r25, 0x05	; 5
				
				if (underThreshold == 5) {
 83e:	c9 16       	cp	r12, r25
 840:	d1 04       	cpc	r13, r1
 842:	09 f0       	breq	.+2      	; 0x846 <main+0x106>
 844:	97 cf       	rjmp	.-210    	; 0x774 <main+0x34>
 846:	85 b1       	in	r24, 0x05	; 5
					PORTB &= ~(1 << PB7); // Turn OFF LED
 848:	8f 77       	andi	r24, 0x7F	; 127
 84a:	85 b9       	out	0x05, r24	; 5
					pwm_set_duty(9);
 84c:	89 e0       	ldi	r24, 0x09	; 9
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	be de       	rcall	.-644    	; 0x5ce <pwm_set_duty>
 852:	2f e7       	ldi	r18, 0x7F	; 127
 854:	81 e3       	ldi	r24, 0x31	; 49
 856:	97 e1       	ldi	r25, 0x17	; 23
 858:	21 50       	subi	r18, 0x01	; 1
 85a:	80 40       	sbci	r24, 0x00	; 0
 85c:	90 40       	sbci	r25, 0x00	; 0
 85e:	e1 f7       	brne	.-8      	; 0x858 <main+0x118>
 860:	00 c0       	rjmp	.+0      	; 0x862 <main+0x122>
 862:	00 00       	nop
 864:	80 e0       	ldi	r24, 0x00	; 0
					_delay_ms(475);
					pwm_set_duty(0);
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	b2 de       	rcall	.-668    	; 0x5ce <pwm_set_duty>
 86a:	e1 2c       	mov	r14, r1
 86c:	f1 2c       	mov	r15, r1
					overThreshold = 0;
 86e:	82 cf       	rjmp	.-252    	; 0x774 <main+0x34>

00000870 <__fixunssfsi>:
 870:	70 d0       	rcall	.+224    	; 0x952 <__fp_splitA>
 872:	88 f0       	brcs	.+34     	; 0x896 <__fixunssfsi+0x26>
 874:	9f 57       	subi	r25, 0x7F	; 127
 876:	90 f0       	brcs	.+36     	; 0x89c <__fixunssfsi+0x2c>
 878:	b9 2f       	mov	r27, r25
 87a:	99 27       	eor	r25, r25
 87c:	b7 51       	subi	r27, 0x17	; 23
 87e:	a0 f0       	brcs	.+40     	; 0x8a8 <__fixunssfsi+0x38>
 880:	d1 f0       	breq	.+52     	; 0x8b6 <__fixunssfsi+0x46>
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	1a f0       	brmi	.+6      	; 0x892 <__fixunssfsi+0x22>
 88c:	ba 95       	dec	r27
 88e:	c9 f7       	brne	.-14     	; 0x882 <__fixunssfsi+0x12>
 890:	12 c0       	rjmp	.+36     	; 0x8b6 <__fixunssfsi+0x46>
 892:	b1 30       	cpi	r27, 0x01	; 1
 894:	81 f0       	breq	.+32     	; 0x8b6 <__fixunssfsi+0x46>
 896:	77 d0       	rcall	.+238    	; 0x986 <__fp_zero>
 898:	b1 e0       	ldi	r27, 0x01	; 1
 89a:	08 95       	ret
 89c:	74 c0       	rjmp	.+232    	; 0x986 <__fp_zero>
 89e:	67 2f       	mov	r22, r23
 8a0:	78 2f       	mov	r23, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	b8 5f       	subi	r27, 0xF8	; 248
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <__fixunssfsi+0x46>
 8a8:	b9 3f       	cpi	r27, 0xF9	; 249
 8aa:	cc f3       	brlt	.-14     	; 0x89e <__fixunssfsi+0x2e>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b3 95       	inc	r27
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <__fixunssfsi+0x3c>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__fixunssfsi+0x56>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__floatunsisf>:
 8c8:	e8 94       	clt
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <__floatsisf+0x12>

000008cc <__floatsisf>:
 8cc:	97 fb       	bst	r25, 7
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__floatsisf+0x12>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	99 23       	and	r25, r25
 8e0:	a9 f0       	breq	.+42     	; 0x90c <__floatsisf+0x40>
 8e2:	f9 2f       	mov	r31, r25
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	bb 27       	eor	r27, r27
 8e8:	93 95       	inc	r25
 8ea:	f6 95       	lsr	r31
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f1 11       	cpse	r31, r1
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <__floatsisf+0x1c>
 8f8:	fa f4       	brpl	.+62     	; 0x938 <__floatsisf+0x6c>
 8fa:	bb 0f       	add	r27, r27
 8fc:	11 f4       	brne	.+4      	; 0x902 <__floatsisf+0x36>
 8fe:	60 ff       	sbrs	r22, 0
 900:	1b c0       	rjmp	.+54     	; 0x938 <__floatsisf+0x6c>
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	16 c0       	rjmp	.+44     	; 0x938 <__floatsisf+0x6c>
 90c:	88 23       	and	r24, r24
 90e:	11 f0       	breq	.+4      	; 0x914 <__floatsisf+0x48>
 910:	96 e9       	ldi	r25, 0x96	; 150
 912:	11 c0       	rjmp	.+34     	; 0x936 <__floatsisf+0x6a>
 914:	77 23       	and	r23, r23
 916:	21 f0       	breq	.+8      	; 0x920 <__floatsisf+0x54>
 918:	9e e8       	ldi	r25, 0x8E	; 142
 91a:	87 2f       	mov	r24, r23
 91c:	76 2f       	mov	r23, r22
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__floatsisf+0x5e>
 920:	66 23       	and	r22, r22
 922:	71 f0       	breq	.+28     	; 0x940 <__floatsisf+0x74>
 924:	96 e8       	ldi	r25, 0x86	; 134
 926:	86 2f       	mov	r24, r22
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	2a f0       	brmi	.+10     	; 0x938 <__floatsisf+0x6c>
 92e:	9a 95       	dec	r25
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	da f7       	brpl	.-10     	; 0x92e <__floatsisf+0x62>
 938:	88 0f       	add	r24, r24
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__fp_split3>:
 942:	57 fd       	sbrc	r21, 7
 944:	90 58       	subi	r25, 0x80	; 128
 946:	44 0f       	add	r20, r20
 948:	55 1f       	adc	r21, r21
 94a:	59 f0       	breq	.+22     	; 0x962 <__fp_splitA+0x10>
 94c:	5f 3f       	cpi	r21, 0xFF	; 255
 94e:	71 f0       	breq	.+28     	; 0x96c <__fp_splitA+0x1a>
 950:	47 95       	ror	r20

00000952 <__fp_splitA>:
 952:	88 0f       	add	r24, r24
 954:	97 fb       	bst	r25, 7
 956:	99 1f       	adc	r25, r25
 958:	61 f0       	breq	.+24     	; 0x972 <__fp_splitA+0x20>
 95a:	9f 3f       	cpi	r25, 0xFF	; 255
 95c:	79 f0       	breq	.+30     	; 0x97c <__fp_splitA+0x2a>
 95e:	87 95       	ror	r24
 960:	08 95       	ret
 962:	12 16       	cp	r1, r18
 964:	13 06       	cpc	r1, r19
 966:	14 06       	cpc	r1, r20
 968:	55 1f       	adc	r21, r21
 96a:	f2 cf       	rjmp	.-28     	; 0x950 <__fp_split3+0xe>
 96c:	46 95       	lsr	r20
 96e:	f1 df       	rcall	.-30     	; 0x952 <__fp_splitA>
 970:	08 c0       	rjmp	.+16     	; 0x982 <__fp_splitA+0x30>
 972:	16 16       	cp	r1, r22
 974:	17 06       	cpc	r1, r23
 976:	18 06       	cpc	r1, r24
 978:	99 1f       	adc	r25, r25
 97a:	f1 cf       	rjmp	.-30     	; 0x95e <__fp_splitA+0xc>
 97c:	86 95       	lsr	r24
 97e:	71 05       	cpc	r23, r1
 980:	61 05       	cpc	r22, r1
 982:	08 94       	sec
 984:	08 95       	ret

00000986 <__fp_zero>:
 986:	e8 94       	clt

00000988 <__fp_szero>:
 988:	bb 27       	eor	r27, r27
 98a:	66 27       	eor	r22, r22
 98c:	77 27       	eor	r23, r23
 98e:	cb 01       	movw	r24, r22
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret
 994:	11 f4       	brne	.+4      	; 0x99a <__fp_szero+0x12>
 996:	0e f4       	brtc	.+2      	; 0x99a <__fp_szero+0x12>
 998:	4d c0       	rjmp	.+154    	; 0xa34 <__fp_nan>
 99a:	3e c0       	rjmp	.+124    	; 0xa18 <__fp_mpack>

0000099c <sqrt>:
 99c:	da df       	rcall	.-76     	; 0x952 <__fp_splitA>
 99e:	d0 f3       	brcs	.-12     	; 0x994 <__fp_szero+0xc>
 9a0:	99 23       	and	r25, r25
 9a2:	d9 f3       	breq	.-10     	; 0x99a <__fp_szero+0x12>
 9a4:	ce f3       	brts	.-14     	; 0x998 <__fp_szero+0x10>
 9a6:	9f 57       	subi	r25, 0x7F	; 127
 9a8:	55 0b       	sbc	r21, r21
 9aa:	87 ff       	sbrs	r24, 7
 9ac:	46 d0       	rcall	.+140    	; 0xa3a <__fp_norm2>
 9ae:	00 24       	eor	r0, r0
 9b0:	a0 e6       	ldi	r26, 0x60	; 96
 9b2:	40 ea       	ldi	r20, 0xA0	; 160
 9b4:	90 01       	movw	r18, r0
 9b6:	80 58       	subi	r24, 0x80	; 128
 9b8:	56 95       	lsr	r21
 9ba:	97 95       	ror	r25
 9bc:	28 f4       	brcc	.+10     	; 0x9c8 <sqrt+0x2c>
 9be:	80 5c       	subi	r24, 0xC0	; 192
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <sqrt+0x34>
 9c8:	26 17       	cp	r18, r22
 9ca:	37 07       	cpc	r19, r23
 9cc:	48 07       	cpc	r20, r24
 9ce:	30 f4       	brcc	.+12     	; 0x9dc <sqrt+0x40>
 9d0:	62 1b       	sub	r22, r18
 9d2:	73 0b       	sbc	r23, r19
 9d4:	84 0b       	sbc	r24, r20
 9d6:	20 29       	or	r18, r0
 9d8:	31 29       	or	r19, r1
 9da:	4a 2b       	or	r20, r26
 9dc:	a6 95       	lsr	r26
 9de:	17 94       	ror	r1
 9e0:	07 94       	ror	r0
 9e2:	20 25       	eor	r18, r0
 9e4:	31 25       	eor	r19, r1
 9e6:	4a 27       	eor	r20, r26
 9e8:	58 f7       	brcc	.-42     	; 0x9c0 <sqrt+0x24>
 9ea:	66 0f       	add	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <sqrt+0x5e>
 9f2:	26 17       	cp	r18, r22
 9f4:	37 07       	cpc	r19, r23
 9f6:	48 07       	cpc	r20, r24
 9f8:	30 f4       	brcc	.+12     	; 0xa06 <sqrt+0x6a>
 9fa:	62 0b       	sbc	r22, r18
 9fc:	73 0b       	sbc	r23, r19
 9fe:	84 0b       	sbc	r24, r20
 a00:	20 0d       	add	r18, r0
 a02:	31 1d       	adc	r19, r1
 a04:	41 1d       	adc	r20, r1
 a06:	a0 95       	com	r26
 a08:	81 f7       	brne	.-32     	; 0x9ea <sqrt+0x4e>
 a0a:	b9 01       	movw	r22, r18
 a0c:	84 2f       	mov	r24, r20
 a0e:	91 58       	subi	r25, 0x81	; 129
 a10:	88 0f       	add	r24, r24
 a12:	96 95       	lsr	r25
 a14:	87 95       	ror	r24
 a16:	08 95       	ret

00000a18 <__fp_mpack>:
 a18:	9f 3f       	cpi	r25, 0xFF	; 255
 a1a:	31 f0       	breq	.+12     	; 0xa28 <__fp_mpack_finite+0xc>

00000a1c <__fp_mpack_finite>:
 a1c:	91 50       	subi	r25, 0x01	; 1
 a1e:	20 f4       	brcc	.+8      	; 0xa28 <__fp_mpack_finite+0xc>
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	88 0f       	add	r24, r24
 a2a:	91 1d       	adc	r25, r1
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <__fp_nan>:
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	80 ec       	ldi	r24, 0xC0	; 192
 a38:	08 95       	ret

00000a3a <__fp_norm2>:
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	50 40       	sbci	r21, 0x00	; 0
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	d2 f7       	brpl	.-12     	; 0xa3a <__fp_norm2>
 a46:	08 95       	ret

00000a48 <__udivmodsi4>:
 a48:	a1 e2       	ldi	r26, 0x21	; 33
 a4a:	1a 2e       	mov	r1, r26
 a4c:	aa 1b       	sub	r26, r26
 a4e:	bb 1b       	sub	r27, r27
 a50:	fd 01       	movw	r30, r26
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <__udivmodsi4_ep>

00000a54 <__udivmodsi4_loop>:
 a54:	aa 1f       	adc	r26, r26
 a56:	bb 1f       	adc	r27, r27
 a58:	ee 1f       	adc	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	a2 17       	cp	r26, r18
 a5e:	b3 07       	cpc	r27, r19
 a60:	e4 07       	cpc	r30, r20
 a62:	f5 07       	cpc	r31, r21
 a64:	20 f0       	brcs	.+8      	; 0xa6e <__udivmodsi4_ep>
 a66:	a2 1b       	sub	r26, r18
 a68:	b3 0b       	sbc	r27, r19
 a6a:	e4 0b       	sbc	r30, r20
 a6c:	f5 0b       	sbc	r31, r21

00000a6e <__udivmodsi4_ep>:
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	1a 94       	dec	r1
 a78:	69 f7       	brne	.-38     	; 0xa54 <__udivmodsi4_loop>
 a7a:	60 95       	com	r22
 a7c:	70 95       	com	r23
 a7e:	80 95       	com	r24
 a80:	90 95       	com	r25
 a82:	9b 01       	movw	r18, r22
 a84:	ac 01       	movw	r20, r24
 a86:	bd 01       	movw	r22, r26
 a88:	cf 01       	movw	r24, r30
 a8a:	08 95       	ret

00000a8c <__mulhisi3>:
 a8c:	05 d0       	rcall	.+10     	; 0xa98 <__umulhisi3>
 a8e:	33 23       	and	r19, r19
 a90:	12 f4       	brpl	.+4      	; 0xa96 <__mulhisi3+0xa>
 a92:	8a 1b       	sub	r24, r26
 a94:	9b 0b       	sbc	r25, r27
 a96:	10 c0       	rjmp	.+32     	; 0xab8 <__usmulhisi3_tail>

00000a98 <__umulhisi3>:
 a98:	a2 9f       	mul	r26, r18
 a9a:	b0 01       	movw	r22, r0
 a9c:	b3 9f       	mul	r27, r19
 a9e:	c0 01       	movw	r24, r0
 aa0:	a3 9f       	mul	r26, r19
 aa2:	70 0d       	add	r23, r0
 aa4:	81 1d       	adc	r24, r1
 aa6:	11 24       	eor	r1, r1
 aa8:	91 1d       	adc	r25, r1
 aaa:	b2 9f       	mul	r27, r18
 aac:	70 0d       	add	r23, r0
 aae:	81 1d       	adc	r24, r1
 ab0:	11 24       	eor	r1, r1
 ab2:	91 1d       	adc	r25, r1
 ab4:	08 95       	ret

00000ab6 <__usmulhisi3>:
 ab6:	f0 df       	rcall	.-32     	; 0xa98 <__umulhisi3>

00000ab8 <__usmulhisi3_tail>:
 ab8:	b7 ff       	sbrs	r27, 7
 aba:	08 95       	ret
 abc:	82 1b       	sub	r24, r18
 abe:	93 0b       	sbc	r25, r19
 ac0:	08 95       	ret

00000ac2 <__muluhisi3>:
 ac2:	ea df       	rcall	.-44     	; 0xa98 <__umulhisi3>
 ac4:	a5 9f       	mul	r26, r21
 ac6:	90 0d       	add	r25, r0
 ac8:	b4 9f       	mul	r27, r20
 aca:	90 0d       	add	r25, r0
 acc:	a4 9f       	mul	r26, r20
 ace:	80 0d       	add	r24, r0
 ad0:	91 1d       	adc	r25, r1
 ad2:	11 24       	eor	r1, r1
 ad4:	08 95       	ret

00000ad6 <__itoa_ncheck>:
 ad6:	bb 27       	eor	r27, r27
 ad8:	4a 30       	cpi	r20, 0x0A	; 10
 ada:	31 f4       	brne	.+12     	; 0xae8 <__itoa_ncheck+0x12>
 adc:	99 23       	and	r25, r25
 ade:	22 f4       	brpl	.+8      	; 0xae8 <__itoa_ncheck+0x12>
 ae0:	bd e2       	ldi	r27, 0x2D	; 45
 ae2:	90 95       	com	r25
 ae4:	81 95       	neg	r24
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	01 c0       	rjmp	.+2      	; 0xaec <__utoa_common>

00000aea <__utoa_ncheck>:
 aea:	bb 27       	eor	r27, r27

00000aec <__utoa_common>:
 aec:	fb 01       	movw	r30, r22
 aee:	55 27       	eor	r21, r21
 af0:	aa 27       	eor	r26, r26
 af2:	88 0f       	add	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	aa 1f       	adc	r26, r26
 af8:	a4 17       	cp	r26, r20
 afa:	10 f0       	brcs	.+4      	; 0xb00 <__utoa_common+0x14>
 afc:	a4 1b       	sub	r26, r20
 afe:	83 95       	inc	r24
 b00:	50 51       	subi	r21, 0x10	; 16
 b02:	b9 f7       	brne	.-18     	; 0xaf2 <__utoa_common+0x6>
 b04:	a0 5d       	subi	r26, 0xD0	; 208
 b06:	aa 33       	cpi	r26, 0x3A	; 58
 b08:	08 f0       	brcs	.+2      	; 0xb0c <__utoa_common+0x20>
 b0a:	a9 5d       	subi	r26, 0xD9	; 217
 b0c:	a1 93       	st	Z+, r26
 b0e:	00 97       	sbiw	r24, 0x00	; 0
 b10:	79 f7       	brne	.-34     	; 0xaf0 <__utoa_common+0x4>
 b12:	b1 11       	cpse	r27, r1
 b14:	b1 93       	st	Z+, r27
 b16:	11 92       	st	Z+, r1
 b18:	cb 01       	movw	r24, r22
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <strrev>

00000b1c <strrev>:
 b1c:	dc 01       	movw	r26, r24
 b1e:	fc 01       	movw	r30, r24
 b20:	67 2f       	mov	r22, r23
 b22:	71 91       	ld	r23, Z+
 b24:	77 23       	and	r23, r23
 b26:	e1 f7       	brne	.-8      	; 0xb20 <strrev+0x4>
 b28:	32 97       	sbiw	r30, 0x02	; 2
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <strrev+0x18>
 b2c:	7c 91       	ld	r23, X
 b2e:	6d 93       	st	X+, r22
 b30:	70 83       	st	Z, r23
 b32:	62 91       	ld	r22, -Z
 b34:	ae 17       	cp	r26, r30
 b36:	bf 07       	cpc	r27, r31
 b38:	c8 f3       	brcs	.-14     	; 0xb2c <strrev+0x10>
 b3a:	08 95       	ret

00000b3c <_exit>:
 b3c:	f8 94       	cli

00000b3e <__stop_program>:
 b3e:	ff cf       	rjmp	.-2      	; 0xb3e <__stop_program>

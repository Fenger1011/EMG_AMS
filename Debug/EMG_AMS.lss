
EMG_AMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000002ca  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f68  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d75  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000434  00000000  00000000  000020dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00002514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000634  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015c  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	3c d0       	rcall	.+120    	; 0x188 <main>
 110:	da c0       	rjmp	.+436    	; 0x2c6 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <adc_init>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1
#define VREF 5000  // in millivolts (5.00V)

void adc_init(void) {
	ADMUX = (1 << REFS0);  // AVcc with external capacitor at AREF
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN)  | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // ADC enable, prescaler 128
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 120:	08 95       	ret

00000122 <adc_read>:
}

uint16_t adc_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Select channel 0–7
 122:	ec e7       	ldi	r30, 0x7C	; 124
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	90 7f       	andi	r25, 0xF0	; 240
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	89 2b       	or	r24, r25
 12e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start conversion
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // Wait
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 13e:	86 fd       	sbrc	r24, 6
 140:	fc cf       	rjmp	.-8      	; 0x13a <adc_read+0x18>
	return ADC;
 142:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 146:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 14a:	08 95       	ret

0000014c <USART0_Init>:

void USART0_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
 14c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 150:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1 << TXEN0);
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 160:	08 95       	ret

00000162 <USART0_Transmit>:
}

void USART0_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 162:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 166:	95 ff       	sbrs	r25, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <USART0_Transmit>
	UDR0 = data;
 16a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 16e:	08 95       	ret

00000170 <USART0_SendString>:
}

void USART0_SendString(const char *str) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	while (*str) USART0_Transmit(*str++);
 176:	02 c0       	rjmp	.+4      	; 0x17c <USART0_SendString+0xc>
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	f3 df       	rcall	.-26     	; 0x162 <USART0_Transmit>
 17c:	88 81       	ld	r24, Y
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <USART0_SendString+0x8>
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <main>:

int main(void) {
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	64 97       	sbiw	r28, 0x14	; 20
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
	USART0_Init(MYUBRR);
 19c:	87 e6       	ldi	r24, 0x67	; 103
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	d5 df       	rcall	.-86     	; 0x14c <USART0_Init>
	adc_init();
 1a2:	b8 df       	rcall	.-144    	; 0x114 <adc_init>

	char buffer[20];

	while (1) {
		uint16_t adc_val = adc_read(0);  // Read from A0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	bd df       	rcall	.-134    	; 0x122 <adc_read>
 1a8:	9c 01       	movw	r18, r24
		uint32_t voltage_mv = ((uint32_t)adc_val * VREF) / 1023;  // in millivolts
 1aa:	a8 e8       	ldi	r26, 0x88	; 136
 1ac:	b3 e1       	ldi	r27, 0x13	; 19
 1ae:	49 d0       	rcall	.+146    	; 0x242 <__umulhisi3>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	33 e0       	ldi	r19, 0x03	; 3
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	22 d0       	rcall	.+68     	; 0x1fe <__udivmodsi4>
 1ba:	ba 01       	movw	r22, r20
		
		uint32_t ac_coupled = voltage_mv - 2500; // Remove 2.5V DC bias
 1bc:	a9 01       	movw	r20, r18
 1be:	44 5c       	subi	r20, 0xC4	; 196
 1c0:	59 40       	sbci	r21, 0x09	; 9
 1c2:	61 09       	sbc	r22, r1
 1c4:	71 09       	sbc	r23, r1
 1c6:	ca 01       	movw	r24, r20
		int envelope = abs(ac_coupled);
 1c8:	99 23       	and	r25, r25
 1ca:	24 f4       	brge	.+8      	; 0x1d4 <main+0x4c>
 1cc:	88 27       	eor	r24, r24
 1ce:	99 27       	eor	r25, r25
 1d0:	84 1b       	sub	r24, r20
 1d2:	95 0b       	sbc	r25, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	be 01       	movw	r22, r28
 1d8:	6f 5f       	subi	r22, 0xFF	; 255
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	41 d0       	rcall	.+130    	; 0x260 <__itoa_ncheck>

		// Format string: e.g., "Voltage: 2480 mV\r\n"
		itoa(envelope, buffer, 10);
		USART0_SendString("Voltage: ");
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	c6 df       	rcall	.-116    	; 0x170 <USART0_SendString>
 1e4:	ce 01       	movw	r24, r28
		USART0_SendString(buffer);
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	c3 df       	rcall	.-122    	; 0x170 <USART0_SendString>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	80 e7       	ldi	r24, 0x70	; 112
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x68>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x72>
 1fa:	00 00       	nop
 1fc:	d3 cf       	rjmp	.-90     	; 0x1a4 <main+0x1c>

000001fe <__udivmodsi4>:
 1fe:	a1 e2       	ldi	r26, 0x21	; 33
 200:	1a 2e       	mov	r1, r26
 202:	aa 1b       	sub	r26, r26
 204:	bb 1b       	sub	r27, r27
 206:	fd 01       	movw	r30, r26
 208:	0d c0       	rjmp	.+26     	; 0x224 <__udivmodsi4_ep>

0000020a <__udivmodsi4_loop>:
 20a:	aa 1f       	adc	r26, r26
 20c:	bb 1f       	adc	r27, r27
 20e:	ee 1f       	adc	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	a2 17       	cp	r26, r18
 214:	b3 07       	cpc	r27, r19
 216:	e4 07       	cpc	r30, r20
 218:	f5 07       	cpc	r31, r21
 21a:	20 f0       	brcs	.+8      	; 0x224 <__udivmodsi4_ep>
 21c:	a2 1b       	sub	r26, r18
 21e:	b3 0b       	sbc	r27, r19
 220:	e4 0b       	sbc	r30, r20
 222:	f5 0b       	sbc	r31, r21

00000224 <__udivmodsi4_ep>:
 224:	66 1f       	adc	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	1a 94       	dec	r1
 22e:	69 f7       	brne	.-38     	; 0x20a <__udivmodsi4_loop>
 230:	60 95       	com	r22
 232:	70 95       	com	r23
 234:	80 95       	com	r24
 236:	90 95       	com	r25
 238:	9b 01       	movw	r18, r22
 23a:	ac 01       	movw	r20, r24
 23c:	bd 01       	movw	r22, r26
 23e:	cf 01       	movw	r24, r30
 240:	08 95       	ret

00000242 <__umulhisi3>:
 242:	a2 9f       	mul	r26, r18
 244:	b0 01       	movw	r22, r0
 246:	b3 9f       	mul	r27, r19
 248:	c0 01       	movw	r24, r0
 24a:	a3 9f       	mul	r26, r19
 24c:	70 0d       	add	r23, r0
 24e:	81 1d       	adc	r24, r1
 250:	11 24       	eor	r1, r1
 252:	91 1d       	adc	r25, r1
 254:	b2 9f       	mul	r27, r18
 256:	70 0d       	add	r23, r0
 258:	81 1d       	adc	r24, r1
 25a:	11 24       	eor	r1, r1
 25c:	91 1d       	adc	r25, r1
 25e:	08 95       	ret

00000260 <__itoa_ncheck>:
 260:	bb 27       	eor	r27, r27
 262:	4a 30       	cpi	r20, 0x0A	; 10
 264:	31 f4       	brne	.+12     	; 0x272 <__itoa_ncheck+0x12>
 266:	99 23       	and	r25, r25
 268:	22 f4       	brpl	.+8      	; 0x272 <__itoa_ncheck+0x12>
 26a:	bd e2       	ldi	r27, 0x2D	; 45
 26c:	90 95       	com	r25
 26e:	81 95       	neg	r24
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	01 c0       	rjmp	.+2      	; 0x276 <__utoa_common>

00000274 <__utoa_ncheck>:
 274:	bb 27       	eor	r27, r27

00000276 <__utoa_common>:
 276:	fb 01       	movw	r30, r22
 278:	55 27       	eor	r21, r21
 27a:	aa 27       	eor	r26, r26
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	aa 1f       	adc	r26, r26
 282:	a4 17       	cp	r26, r20
 284:	10 f0       	brcs	.+4      	; 0x28a <__utoa_common+0x14>
 286:	a4 1b       	sub	r26, r20
 288:	83 95       	inc	r24
 28a:	50 51       	subi	r21, 0x10	; 16
 28c:	b9 f7       	brne	.-18     	; 0x27c <__utoa_common+0x6>
 28e:	a0 5d       	subi	r26, 0xD0	; 208
 290:	aa 33       	cpi	r26, 0x3A	; 58
 292:	08 f0       	brcs	.+2      	; 0x296 <__utoa_common+0x20>
 294:	a9 5d       	subi	r26, 0xD9	; 217
 296:	a1 93       	st	Z+, r26
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	79 f7       	brne	.-34     	; 0x27a <__utoa_common+0x4>
 29c:	b1 11       	cpse	r27, r1
 29e:	b1 93       	st	Z+, r27
 2a0:	11 92       	st	Z+, r1
 2a2:	cb 01       	movw	r24, r22
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <strrev>

000002a6 <strrev>:
 2a6:	dc 01       	movw	r26, r24
 2a8:	fc 01       	movw	r30, r24
 2aa:	67 2f       	mov	r22, r23
 2ac:	71 91       	ld	r23, Z+
 2ae:	77 23       	and	r23, r23
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <strrev+0x4>
 2b2:	32 97       	sbiw	r30, 0x02	; 2
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <strrev+0x18>
 2b6:	7c 91       	ld	r23, X
 2b8:	6d 93       	st	X+, r22
 2ba:	70 83       	st	Z, r23
 2bc:	62 91       	ld	r22, -Z
 2be:	ae 17       	cp	r26, r30
 2c0:	bf 07       	cpc	r27, r31
 2c2:	c8 f3       	brcs	.-14     	; 0x2b6 <strrev+0x10>
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>

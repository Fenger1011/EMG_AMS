
EMG_AMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000004fa  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f19  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d3d  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f3  00000000  00000000  00002282  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000600  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020a  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	3c d0       	rcall	.+120    	; 0x188 <main>
 110:	f2 c1       	rjmp	.+996    	; 0x4f6 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <USART0_Init>:
#define MYUBRR (F_CPU/16/BAUD - 1)
#define VREF 5000         // in millivolts
#define BUFFER_SIZE 480   // 50 ms at ~9600 Hz

void USART0_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
 114:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1 << TXEN0);
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 128:	08 95       	ret

0000012a <USART0_Transmit>:
}

void USART0_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 12a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <USART0_Transmit>
	UDR0 = data;
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 136:	08 95       	ret

00000138 <USART0_SendString>:
}

void USART0_SendString(const char *str) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
	while (*str) USART0_Transmit(*str++);
 13e:	02 c0       	rjmp	.+4      	; 0x144 <USART0_SendString+0xc>
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	f3 df       	rcall	.-26     	; 0x12a <USART0_Transmit>
 144:	88 81       	ld	r24, Y
 146:	81 11       	cpse	r24, r1
 148:	fb cf       	rjmp	.-10     	; 0x140 <USART0_SendString+0x8>
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <adc_init>:

void adc_init(void) {
	ADMUX = (1 << REFS0);  // AVcc reference
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN)  |
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 15c:	08 95       	ret

0000015e <adc_read>:
	(1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Prescaler 128
}

uint16_t adc_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 15e:	ec e7       	ldi	r30, 0x7C	; 124
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	90 81       	ld	r25, Z
 164:	90 7f       	andi	r25, 0xF0	; 240
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	89 2b       	or	r24, r25
 16a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 176:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 17a:	86 fd       	sbrc	r24, 6
 17c:	fc cf       	rjmp	.-8      	; 0x176 <adc_read+0x18>
	return ADC;
 17e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 182:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 186:	08 95       	ret

00000188 <main>:

int main(void) {
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	60 97       	sbiw	r28, 0x10	; 16
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
	USART0_Init(MYUBRR);
 19c:	87 e6       	ldi	r24, 0x67	; 103
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	b9 df       	rcall	.-142    	; 0x114 <USART0_Init>
	adc_init();
 1a2:	d6 df       	rcall	.-84     	; 0x150 <adc_init>
 1a4:	00 e0       	ldi	r16, 0x00	; 0
	char buffer[16];
	
	while (1) {
		sum_squares = 0;

		for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	c1 2c       	mov	r12, r1
	uint32_t sum_squares;
	uint16_t rms_mv;
	char buffer[16];
	
	while (1) {
		sum_squares = 0;
 1aa:	d1 2c       	mov	r13, r1
 1ac:	76 01       	movw	r14, r12
 1ae:	1a c0       	rjmp	.+52     	; 0x1e4 <main+0x5c>

		for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
			adc_val = adc_read(0);  // Fast sampling at ~9.6 kHz
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	d5 df       	rcall	.-86     	; 0x15e <adc_read>
 1b4:	9c 01       	movw	r18, r24
			voltage_mv = ((uint32_t)adc_val * VREF) / 1023;
 1b6:	a8 e8       	ldi	r26, 0x88	; 136
 1b8:	b3 e1       	ldi	r27, 0x13	; 19
 1ba:	51 d1       	rcall	.+674    	; 0x45e <__umulhisi3>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	33 e0       	ldi	r19, 0x03	; 3
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	2a d1       	rcall	.+596    	; 0x41a <__udivmodsi4>
 1c6:	ca 01       	movw	r24, r20
			ac_sample = (int32_t)voltage_mv - 2500;
 1c8:	b9 01       	movw	r22, r18
 1ca:	64 5c       	subi	r22, 0xC4	; 196
 1cc:	79 40       	sbci	r23, 0x09	; 9
 1ce:	81 09       	sbc	r24, r1
 1d0:	91 09       	sbc	r25, r1
			sum_squares += (uint32_t)(ac_sample * ac_sample);
 1d2:	9b 01       	movw	r18, r22
 1d4:	ac 01       	movw	r20, r24
 1d6:	12 d1       	rcall	.+548    	; 0x3fc <__mulsi3>
 1d8:	c6 0e       	add	r12, r22
 1da:	d7 1e       	adc	r13, r23
 1dc:	e8 1e       	adc	r14, r24
 1de:	f9 1e       	adc	r15, r25
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
	char buffer[16];
	
	while (1) {
		sum_squares = 0;

		for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	00 3e       	cpi	r16, 0xE0	; 224
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	18 07       	cpc	r17, r24
 1ea:	10 f3       	brcs	.-60     	; 0x1b0 <main+0x28>
 1ec:	c7 01       	movw	r24, r14
			voltage_mv = ((uint32_t)adc_val * VREF) / 1023;
			ac_sample = (int32_t)voltage_mv - 2500;
			sum_squares += (uint32_t)(ac_sample * ac_sample);
		}

		rms_mv = (uint16_t)sqrt(sum_squares / BUFFER_SIZE);
 1ee:	b6 01       	movw	r22, r12
 1f0:	20 ee       	ldi	r18, 0xE0	; 224
 1f2:	31 e0       	ldi	r19, 0x01	; 1
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	10 d1       	rcall	.+544    	; 0x41a <__udivmodsi4>
 1fa:	69 01       	movw	r12, r18
 1fc:	7a 01       	movw	r14, r20
 1fe:	c7 01       	movw	r24, r14
 200:	b6 01       	movw	r22, r12
 202:	3c d0       	rcall	.+120    	; 0x27c <__floatunsisf>
 204:	a5 d0       	rcall	.+330    	; 0x350 <sqrt>
 206:	0e d0       	rcall	.+28     	; 0x224 <__fixunssfsi>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 20c:	4a e0       	ldi	r20, 0x0A	; 10
 20e:	be 01       	movw	r22, r28
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	3d d1       	rcall	.+634    	; 0x490 <__itoa_ncheck>

		itoa(rms_mv, buffer, 10);
		USART0_SendString(buffer);
 216:	ce 01       	movw	r24, r28
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	8e df       	rcall	.-228    	; 0x138 <USART0_SendString>
 21c:	80 e0       	ldi	r24, 0x00	; 0
		USART0_SendString("\r\n");
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	8b df       	rcall	.-234    	; 0x138 <USART0_SendString>
 222:	c0 cf       	rjmp	.-128    	; 0x1a4 <main+0x1c>

00000224 <__fixunssfsi>:
 224:	70 d0       	rcall	.+224    	; 0x306 <__fp_splitA>

		// Optional small pause between batches (not needed for sampling)
		// _delay_ms(1);
		
		
	}
 226:	88 f0       	brcs	.+34     	; 0x24a <__fixunssfsi+0x26>
 228:	9f 57       	subi	r25, 0x7F	; 127
 22a:	90 f0       	brcs	.+36     	; 0x250 <__fixunssfsi+0x2c>
 22c:	b9 2f       	mov	r27, r25
 22e:	99 27       	eor	r25, r25
 230:	b7 51       	subi	r27, 0x17	; 23
 232:	a0 f0       	brcs	.+40     	; 0x25c <__fixunssfsi+0x38>
 234:	d1 f0       	breq	.+52     	; 0x26a <__fixunssfsi+0x46>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	88 1f       	adc	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	1a f0       	brmi	.+6      	; 0x246 <__fixunssfsi+0x22>
 240:	ba 95       	dec	r27
 242:	c9 f7       	brne	.-14     	; 0x236 <__fixunssfsi+0x12>
 244:	12 c0       	rjmp	.+36     	; 0x26a <__fixunssfsi+0x46>
 246:	b1 30       	cpi	r27, 0x01	; 1
 248:	81 f0       	breq	.+32     	; 0x26a <__fixunssfsi+0x46>
 24a:	77 d0       	rcall	.+238    	; 0x33a <__fp_zero>
 24c:	b1 e0       	ldi	r27, 0x01	; 1
 24e:	08 95       	ret
 250:	74 c0       	rjmp	.+232    	; 0x33a <__fp_zero>
 252:	67 2f       	mov	r22, r23
 254:	78 2f       	mov	r23, r24
 256:	88 27       	eor	r24, r24
 258:	b8 5f       	subi	r27, 0xF8	; 248
 25a:	39 f0       	breq	.+14     	; 0x26a <__fixunssfsi+0x46>
 25c:	b9 3f       	cpi	r27, 0xF9	; 249
 25e:	cc f3       	brlt	.-14     	; 0x252 <__fixunssfsi+0x2e>
 260:	86 95       	lsr	r24
 262:	77 95       	ror	r23
 264:	67 95       	ror	r22
 266:	b3 95       	inc	r27
 268:	d9 f7       	brne	.-10     	; 0x260 <__fixunssfsi+0x3c>
 26a:	3e f4       	brtc	.+14     	; 0x27a <__fixunssfsi+0x56>
 26c:	90 95       	com	r25
 26e:	80 95       	com	r24
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	8f 4f       	sbci	r24, 0xFF	; 255
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__floatunsisf>:
 27c:	e8 94       	clt
 27e:	09 c0       	rjmp	.+18     	; 0x292 <__floatsisf+0x12>

00000280 <__floatsisf>:
 280:	97 fb       	bst	r25, 7
 282:	3e f4       	brtc	.+14     	; 0x292 <__floatsisf+0x12>
 284:	90 95       	com	r25
 286:	80 95       	com	r24
 288:	70 95       	com	r23
 28a:	61 95       	neg	r22
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	8f 4f       	sbci	r24, 0xFF	; 255
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	99 23       	and	r25, r25
 294:	a9 f0       	breq	.+42     	; 0x2c0 <__floatsisf+0x40>
 296:	f9 2f       	mov	r31, r25
 298:	96 e9       	ldi	r25, 0x96	; 150
 29a:	bb 27       	eor	r27, r27
 29c:	93 95       	inc	r25
 29e:	f6 95       	lsr	r31
 2a0:	87 95       	ror	r24
 2a2:	77 95       	ror	r23
 2a4:	67 95       	ror	r22
 2a6:	b7 95       	ror	r27
 2a8:	f1 11       	cpse	r31, r1
 2aa:	f8 cf       	rjmp	.-16     	; 0x29c <__floatsisf+0x1c>
 2ac:	fa f4       	brpl	.+62     	; 0x2ec <__floatsisf+0x6c>
 2ae:	bb 0f       	add	r27, r27
 2b0:	11 f4       	brne	.+4      	; 0x2b6 <__floatsisf+0x36>
 2b2:	60 ff       	sbrs	r22, 0
 2b4:	1b c0       	rjmp	.+54     	; 0x2ec <__floatsisf+0x6c>
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	8f 4f       	sbci	r24, 0xFF	; 255
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	16 c0       	rjmp	.+44     	; 0x2ec <__floatsisf+0x6c>
 2c0:	88 23       	and	r24, r24
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <__floatsisf+0x48>
 2c4:	96 e9       	ldi	r25, 0x96	; 150
 2c6:	11 c0       	rjmp	.+34     	; 0x2ea <__floatsisf+0x6a>
 2c8:	77 23       	and	r23, r23
 2ca:	21 f0       	breq	.+8      	; 0x2d4 <__floatsisf+0x54>
 2cc:	9e e8       	ldi	r25, 0x8E	; 142
 2ce:	87 2f       	mov	r24, r23
 2d0:	76 2f       	mov	r23, r22
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <__floatsisf+0x5e>
 2d4:	66 23       	and	r22, r22
 2d6:	71 f0       	breq	.+28     	; 0x2f4 <__floatsisf+0x74>
 2d8:	96 e8       	ldi	r25, 0x86	; 134
 2da:	86 2f       	mov	r24, r22
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	2a f0       	brmi	.+10     	; 0x2ec <__floatsisf+0x6c>
 2e2:	9a 95       	dec	r25
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24
 2ea:	da f7       	brpl	.-10     	; 0x2e2 <__floatsisf+0x62>
 2ec:	88 0f       	add	r24, r24
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	97 f9       	bld	r25, 7
 2f4:	08 95       	ret

000002f6 <__fp_split3>:
 2f6:	57 fd       	sbrc	r21, 7
 2f8:	90 58       	subi	r25, 0x80	; 128
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	59 f0       	breq	.+22     	; 0x316 <__fp_splitA+0x10>
 300:	5f 3f       	cpi	r21, 0xFF	; 255
 302:	71 f0       	breq	.+28     	; 0x320 <__fp_splitA+0x1a>
 304:	47 95       	ror	r20

00000306 <__fp_splitA>:
 306:	88 0f       	add	r24, r24
 308:	97 fb       	bst	r25, 7
 30a:	99 1f       	adc	r25, r25
 30c:	61 f0       	breq	.+24     	; 0x326 <__fp_splitA+0x20>
 30e:	9f 3f       	cpi	r25, 0xFF	; 255
 310:	79 f0       	breq	.+30     	; 0x330 <__fp_splitA+0x2a>
 312:	87 95       	ror	r24
 314:	08 95       	ret
 316:	12 16       	cp	r1, r18
 318:	13 06       	cpc	r1, r19
 31a:	14 06       	cpc	r1, r20
 31c:	55 1f       	adc	r21, r21
 31e:	f2 cf       	rjmp	.-28     	; 0x304 <__fp_split3+0xe>
 320:	46 95       	lsr	r20
 322:	f1 df       	rcall	.-30     	; 0x306 <__fp_splitA>
 324:	08 c0       	rjmp	.+16     	; 0x336 <__fp_splitA+0x30>
 326:	16 16       	cp	r1, r22
 328:	17 06       	cpc	r1, r23
 32a:	18 06       	cpc	r1, r24
 32c:	99 1f       	adc	r25, r25
 32e:	f1 cf       	rjmp	.-30     	; 0x312 <__fp_splitA+0xc>
 330:	86 95       	lsr	r24
 332:	71 05       	cpc	r23, r1
 334:	61 05       	cpc	r22, r1
 336:	08 94       	sec
 338:	08 95       	ret

0000033a <__fp_zero>:
 33a:	e8 94       	clt

0000033c <__fp_szero>:
 33c:	bb 27       	eor	r27, r27
 33e:	66 27       	eor	r22, r22
 340:	77 27       	eor	r23, r23
 342:	cb 01       	movw	r24, r22
 344:	97 f9       	bld	r25, 7
 346:	08 95       	ret
 348:	11 f4       	brne	.+4      	; 0x34e <__fp_szero+0x12>
 34a:	0e f4       	brtc	.+2      	; 0x34e <__fp_szero+0x12>
 34c:	4d c0       	rjmp	.+154    	; 0x3e8 <__fp_nan>
 34e:	3e c0       	rjmp	.+124    	; 0x3cc <__fp_mpack>

00000350 <sqrt>:
 350:	da df       	rcall	.-76     	; 0x306 <__fp_splitA>
 352:	d0 f3       	brcs	.-12     	; 0x348 <__fp_szero+0xc>
 354:	99 23       	and	r25, r25
 356:	d9 f3       	breq	.-10     	; 0x34e <__fp_szero+0x12>
 358:	ce f3       	brts	.-14     	; 0x34c <__fp_szero+0x10>
 35a:	9f 57       	subi	r25, 0x7F	; 127
 35c:	55 0b       	sbc	r21, r21
 35e:	87 ff       	sbrs	r24, 7
 360:	46 d0       	rcall	.+140    	; 0x3ee <__fp_norm2>
 362:	00 24       	eor	r0, r0
 364:	a0 e6       	ldi	r26, 0x60	; 96
 366:	40 ea       	ldi	r20, 0xA0	; 160
 368:	90 01       	movw	r18, r0
 36a:	80 58       	subi	r24, 0x80	; 128
 36c:	56 95       	lsr	r21
 36e:	97 95       	ror	r25
 370:	28 f4       	brcc	.+10     	; 0x37c <sqrt+0x2c>
 372:	80 5c       	subi	r24, 0xC0	; 192
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	20 f0       	brcs	.+8      	; 0x384 <sqrt+0x34>
 37c:	26 17       	cp	r18, r22
 37e:	37 07       	cpc	r19, r23
 380:	48 07       	cpc	r20, r24
 382:	30 f4       	brcc	.+12     	; 0x390 <sqrt+0x40>
 384:	62 1b       	sub	r22, r18
 386:	73 0b       	sbc	r23, r19
 388:	84 0b       	sbc	r24, r20
 38a:	20 29       	or	r18, r0
 38c:	31 29       	or	r19, r1
 38e:	4a 2b       	or	r20, r26
 390:	a6 95       	lsr	r26
 392:	17 94       	ror	r1
 394:	07 94       	ror	r0
 396:	20 25       	eor	r18, r0
 398:	31 25       	eor	r19, r1
 39a:	4a 27       	eor	r20, r26
 39c:	58 f7       	brcc	.-42     	; 0x374 <sqrt+0x24>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	88 1f       	adc	r24, r24
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <sqrt+0x5e>
 3a6:	26 17       	cp	r18, r22
 3a8:	37 07       	cpc	r19, r23
 3aa:	48 07       	cpc	r20, r24
 3ac:	30 f4       	brcc	.+12     	; 0x3ba <sqrt+0x6a>
 3ae:	62 0b       	sbc	r22, r18
 3b0:	73 0b       	sbc	r23, r19
 3b2:	84 0b       	sbc	r24, r20
 3b4:	20 0d       	add	r18, r0
 3b6:	31 1d       	adc	r19, r1
 3b8:	41 1d       	adc	r20, r1
 3ba:	a0 95       	com	r26
 3bc:	81 f7       	brne	.-32     	; 0x39e <sqrt+0x4e>
 3be:	b9 01       	movw	r22, r18
 3c0:	84 2f       	mov	r24, r20
 3c2:	91 58       	subi	r25, 0x81	; 129
 3c4:	88 0f       	add	r24, r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	08 95       	ret

000003cc <__fp_mpack>:
 3cc:	9f 3f       	cpi	r25, 0xFF	; 255
 3ce:	31 f0       	breq	.+12     	; 0x3dc <__fp_mpack_finite+0xc>

000003d0 <__fp_mpack_finite>:
 3d0:	91 50       	subi	r25, 0x01	; 1
 3d2:	20 f4       	brcc	.+8      	; 0x3dc <__fp_mpack_finite+0xc>
 3d4:	87 95       	ror	r24
 3d6:	77 95       	ror	r23
 3d8:	67 95       	ror	r22
 3da:	b7 95       	ror	r27
 3dc:	88 0f       	add	r24, r24
 3de:	91 1d       	adc	r25, r1
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_nan>:
 3e8:	9f ef       	ldi	r25, 0xFF	; 255
 3ea:	80 ec       	ldi	r24, 0xC0	; 192
 3ec:	08 95       	ret

000003ee <__fp_norm2>:
 3ee:	91 50       	subi	r25, 0x01	; 1
 3f0:	50 40       	sbci	r21, 0x00	; 0
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	d2 f7       	brpl	.-12     	; 0x3ee <__fp_norm2>
 3fa:	08 95       	ret

000003fc <__mulsi3>:
 3fc:	db 01       	movw	r26, r22
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	3c d0       	rcall	.+120    	; 0x47c <__muluhisi3>
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	a2 9f       	mul	r26, r18
 40a:	80 0d       	add	r24, r0
 40c:	91 1d       	adc	r25, r1
 40e:	a3 9f       	mul	r26, r19
 410:	90 0d       	add	r25, r0
 412:	b2 9f       	mul	r27, r18
 414:	90 0d       	add	r25, r0
 416:	11 24       	eor	r1, r1
 418:	08 95       	ret

0000041a <__udivmodsi4>:
 41a:	a1 e2       	ldi	r26, 0x21	; 33
 41c:	1a 2e       	mov	r1, r26
 41e:	aa 1b       	sub	r26, r26
 420:	bb 1b       	sub	r27, r27
 422:	fd 01       	movw	r30, r26
 424:	0d c0       	rjmp	.+26     	; 0x440 <__udivmodsi4_ep>

00000426 <__udivmodsi4_loop>:
 426:	aa 1f       	adc	r26, r26
 428:	bb 1f       	adc	r27, r27
 42a:	ee 1f       	adc	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	a2 17       	cp	r26, r18
 430:	b3 07       	cpc	r27, r19
 432:	e4 07       	cpc	r30, r20
 434:	f5 07       	cpc	r31, r21
 436:	20 f0       	brcs	.+8      	; 0x440 <__udivmodsi4_ep>
 438:	a2 1b       	sub	r26, r18
 43a:	b3 0b       	sbc	r27, r19
 43c:	e4 0b       	sbc	r30, r20
 43e:	f5 0b       	sbc	r31, r21

00000440 <__udivmodsi4_ep>:
 440:	66 1f       	adc	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	1a 94       	dec	r1
 44a:	69 f7       	brne	.-38     	; 0x426 <__udivmodsi4_loop>
 44c:	60 95       	com	r22
 44e:	70 95       	com	r23
 450:	80 95       	com	r24
 452:	90 95       	com	r25
 454:	9b 01       	movw	r18, r22
 456:	ac 01       	movw	r20, r24
 458:	bd 01       	movw	r22, r26
 45a:	cf 01       	movw	r24, r30
 45c:	08 95       	ret

0000045e <__umulhisi3>:
 45e:	a2 9f       	mul	r26, r18
 460:	b0 01       	movw	r22, r0
 462:	b3 9f       	mul	r27, r19
 464:	c0 01       	movw	r24, r0
 466:	a3 9f       	mul	r26, r19
 468:	70 0d       	add	r23, r0
 46a:	81 1d       	adc	r24, r1
 46c:	11 24       	eor	r1, r1
 46e:	91 1d       	adc	r25, r1
 470:	b2 9f       	mul	r27, r18
 472:	70 0d       	add	r23, r0
 474:	81 1d       	adc	r24, r1
 476:	11 24       	eor	r1, r1
 478:	91 1d       	adc	r25, r1
 47a:	08 95       	ret

0000047c <__muluhisi3>:
 47c:	f0 df       	rcall	.-32     	; 0x45e <__umulhisi3>
 47e:	a5 9f       	mul	r26, r21
 480:	90 0d       	add	r25, r0
 482:	b4 9f       	mul	r27, r20
 484:	90 0d       	add	r25, r0
 486:	a4 9f       	mul	r26, r20
 488:	80 0d       	add	r24, r0
 48a:	91 1d       	adc	r25, r1
 48c:	11 24       	eor	r1, r1
 48e:	08 95       	ret

00000490 <__itoa_ncheck>:
 490:	bb 27       	eor	r27, r27
 492:	4a 30       	cpi	r20, 0x0A	; 10
 494:	31 f4       	brne	.+12     	; 0x4a2 <__itoa_ncheck+0x12>
 496:	99 23       	and	r25, r25
 498:	22 f4       	brpl	.+8      	; 0x4a2 <__itoa_ncheck+0x12>
 49a:	bd e2       	ldi	r27, 0x2D	; 45
 49c:	90 95       	com	r25
 49e:	81 95       	neg	r24
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <__utoa_common>

000004a4 <__utoa_ncheck>:
 4a4:	bb 27       	eor	r27, r27

000004a6 <__utoa_common>:
 4a6:	fb 01       	movw	r30, r22
 4a8:	55 27       	eor	r21, r21
 4aa:	aa 27       	eor	r26, r26
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	aa 1f       	adc	r26, r26
 4b2:	a4 17       	cp	r26, r20
 4b4:	10 f0       	brcs	.+4      	; 0x4ba <__utoa_common+0x14>
 4b6:	a4 1b       	sub	r26, r20
 4b8:	83 95       	inc	r24
 4ba:	50 51       	subi	r21, 0x10	; 16
 4bc:	b9 f7       	brne	.-18     	; 0x4ac <__utoa_common+0x6>
 4be:	a0 5d       	subi	r26, 0xD0	; 208
 4c0:	aa 33       	cpi	r26, 0x3A	; 58
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__utoa_common+0x20>
 4c4:	a9 5d       	subi	r26, 0xD9	; 217
 4c6:	a1 93       	st	Z+, r26
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	79 f7       	brne	.-34     	; 0x4aa <__utoa_common+0x4>
 4cc:	b1 11       	cpse	r27, r1
 4ce:	b1 93       	st	Z+, r27
 4d0:	11 92       	st	Z+, r1
 4d2:	cb 01       	movw	r24, r22
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <strrev>

000004d6 <strrev>:
 4d6:	dc 01       	movw	r26, r24
 4d8:	fc 01       	movw	r30, r24
 4da:	67 2f       	mov	r22, r23
 4dc:	71 91       	ld	r23, Z+
 4de:	77 23       	and	r23, r23
 4e0:	e1 f7       	brne	.-8      	; 0x4da <strrev+0x4>
 4e2:	32 97       	sbiw	r30, 0x02	; 2
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <strrev+0x18>
 4e6:	7c 91       	ld	r23, X
 4e8:	6d 93       	st	X+, r22
 4ea:	70 83       	st	Z, r23
 4ec:	62 91       	ld	r22, -Z
 4ee:	ae 17       	cp	r26, r30
 4f0:	bf 07       	cpc	r27, r31
 4f2:	c8 f3       	brcs	.-14     	; 0x4e6 <strrev+0x10>
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>


EMG_AMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e3  00800200  00800200  00000576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f16  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d12  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055c  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000027d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c0  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	61 c0       	rjmp	.+194    	; 0x138 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 3e       	cpi	r26, 0xE3	; 227
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	b4 d0       	rcall	.+360    	; 0x26e <main>
 106:	fb c1       	rjmp	.+1014   	; 0x4fe <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <USART0_Init>:

// Initializes USART
void USART0_Init(unsigned int ubrr) {
	
	// Need to set the Baud rate registers for USART
	UBRR0H = (unsigned char)(ubrr >> 8); // Holds high byte (15-8)
 10a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr; // Holds low byte (7-0)
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0B = (1 << TXEN0); // UCSR0B is USART control and status register B, (1<<TXEN0) enables transmission
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // UCSR0C is USART control and status register C, this sets USART to 8-bit mode, USBS0=0 mean 1 stop bit {8N1 mode}
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 11e:	08 95       	ret

00000120 <adc_init>:


/*******************************************************ADC*************************************************************/
// Initializes ADC
void adc_init(void) {
	ADMUX  = (1 << REFS0);									// AVcc as ref
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1 << ADEN)  | (1 << ADIE)						// Enable ADC + interrupt
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8f e8       	ldi	r24, 0x8F	; 143
 12c:	80 83       	st	Z, r24
		   | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Prescaler 128
	sei();													// Global interrupts on
 12e:	78 94       	sei
	ADCSRA |= (1 << ADSC);									// Kick off first conversion
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <__vector_29>:
}
/***********************************************************************************************************************/

/*******************************************************ISR*************************************************************/
ISR(ADC_vect) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	0b b6       	in	r0, 0x3b	; 59
 144:	0f 92       	push	r0
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	emg_samples[emg_index++] = ADC;
 152:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <emg_index>
 156:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <emg_index+0x1>
 15a:	9c 01       	movw	r18, r24
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	30 93 02 02 	sts	0x0202, r19	; 0x800202 <emg_index+0x1>
 164:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <emg_index>
 168:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 16c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	fc 01       	movw	r30, r24
 176:	ed 5f       	subi	r30, 0xFD	; 253
 178:	fd 4f       	sbci	r31, 0xFD	; 253
 17a:	31 83       	std	Z+1, r19	; 0x01
 17c:	20 83       	st	Z, r18

	if (emg_index >= BUFFER_SIZE) {
 17e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <emg_index>
 182:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <emg_index+0x1>
 186:	80 3f       	cpi	r24, 0xF0	; 240
 188:	91 05       	cpc	r25, r1
 18a:	38 f0       	brcs	.+14     	; 0x19a <__vector_29+0x62>
		emg_index = 0;
 18c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <emg_index+0x1>
 190:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <emg_index>
		emg_buffer_full = 1;  // set flag to signal main
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}

	ADCSRA |= (1 << ADSC); // start next conversion
 19a:	ea e7       	ldi	r30, 0x7A	; 122
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	80 83       	st	Z, r24
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0b be       	out	0x3b, r0	; 59
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <calculate_RMS>:
/***********************************************************************************************************************/

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {
 1be:	8f 92       	push	r8
 1c0:	9f 92       	push	r9
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15

	uint32_t sum = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
/***********************************************************************************************************************/

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {

	uint32_t sum = 0;
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	ba 01       	movw	r22, r20
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <calculate_RMS+0x34>
		sum += emg_samples[i];
 1da:	fc 01       	movw	r30, r24
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	ed 5f       	subi	r30, 0xFD	; 253
 1e2:	fd 4f       	sbci	r31, 0xFD	; 253
 1e4:	20 81       	ld	r18, Z
 1e6:	31 81       	ldd	r19, Z+1	; 0x01
 1e8:	42 0f       	add	r20, r18
 1ea:	53 1f       	adc	r21, r19
 1ec:	61 1d       	adc	r22, r1
 1ee:	71 1d       	adc	r23, r1

/*****************************************SIGNAL CONDITIONING***********************************************************/
uint16_t calculate_RMS(void) {

	uint32_t sum = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	80 3f       	cpi	r24, 0xF0	; 240
 1f4:	91 05       	cpc	r25, r1
 1f6:	88 f3       	brcs	.-30     	; 0x1da <calculate_RMS+0x1c>
		sum += emg_samples[i];
	}
	uint16_t mean = sum / BUFFER_SIZE;
 1f8:	cb 01       	movw	r24, r22
 1fa:	ba 01       	movw	r22, r20
 1fc:	20 ef       	ldi	r18, 0xF0	; 240
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	3f d1       	rcall	.+638    	; 0x484 <__udivmodsi4>
 206:	49 01       	movw	r8, r18
 208:	5a 01       	movw	r10, r20

	uint32_t sum_squares = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
		sum += emg_samples[i];
	}
	uint16_t mean = sum / BUFFER_SIZE;

	uint32_t sum_squares = 0;
 20e:	c1 2c       	mov	r12, r1
 210:	d1 2c       	mov	r13, r1
 212:	76 01       	movw	r14, r12
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 214:	11 c0       	rjmp	.+34     	; 0x238 <calculate_RMS+0x7a>
		int16_t centered_sample = (int16_t)emg_samples[i] - (int16_t)mean;
 216:	fa 01       	movw	r30, r20
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ed 5f       	subi	r30, 0xFD	; 253
 21e:	fd 4f       	sbci	r31, 0xFD	; 253
 220:	a0 81       	ld	r26, Z
 222:	b1 81       	ldd	r27, Z+1	; 0x01
 224:	a8 19       	sub	r26, r8
 226:	b9 09       	sbc	r27, r9
		sum_squares += (uint32_t)centered_sample * (uint32_t)centered_sample;
 228:	9d 01       	movw	r18, r26
 22a:	4e d1       	rcall	.+668    	; 0x4c8 <__mulhisi3>
 22c:	c6 0e       	add	r12, r22
 22e:	d7 1e       	adc	r13, r23
 230:	e8 1e       	adc	r14, r24
 232:	f9 1e       	adc	r15, r25
		sum += emg_samples[i];
	}
	uint16_t mean = sum / BUFFER_SIZE;

	uint32_t sum_squares = 0;
	for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 234:	4f 5f       	subi	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	40 3f       	cpi	r20, 0xF0	; 240
 23a:	51 05       	cpc	r21, r1
 23c:	60 f3       	brcs	.-40     	; 0x216 <calculate_RMS+0x58>
		int16_t centered_sample = (int16_t)emg_samples[i] - (int16_t)mean;
		sum_squares += (uint32_t)centered_sample * (uint32_t)centered_sample;
	}

	uint32_t mean_square = sum_squares / BUFFER_SIZE;
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	20 ef       	ldi	r18, 0xF0	; 240
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	1c d1       	rcall	.+568    	; 0x484 <__udivmodsi4>
 24c:	69 01       	movw	r12, r18
 24e:	7a 01       	movw	r14, r20
	uint16_t rms = (uint16_t)sqrt((double)mean_square);
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	57 d0       	rcall	.+174    	; 0x304 <__floatunsisf>
 256:	c0 d0       	rcall	.+384    	; 0x3d8 <sqrt>
 258:	29 d0       	rcall	.+82     	; 0x2ac <__fixunssfsi>
 25a:	cb 01       	movw	r24, r22

	return rms;  // 0..1023 ? ADC range RMS (centered)
}
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	bf 90       	pop	r11
 266:	af 90       	pop	r10
 268:	9f 90       	pop	r9
 26a:	8f 90       	pop	r8
 26c:	08 95       	ret

0000026e <main>:
 26e:	87 e6       	ldi	r24, 0x67	; 103
/************************************************************************************************************************/

int main(void) {

	USART0_Init(MYUBRR);
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	4b df       	rcall	.-362    	; 0x10a <USART0_Init>
	adc_init();
 274:	55 df       	rcall	.-342    	; 0x120 <adc_init>
 276:	84 b1       	in	r24, 0x04	; 4

	uint16_t rms_adc = 0;
	uint32_t rms_mv = 0;
	
	// Set pin 13 (PB7) as output for debugging
	DDRB |= (1 << PB7);
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	84 b9       	out	0x04, r24	; 4
 27c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>

	while (1) {

		// Check if EMG buffer is full (ISR sets this flag)
		if (emg_buffer_full) {
 280:	88 23       	and	r24, r24
 282:	e1 f3       	breq	.-8      	; 0x27c <main+0xe>
 284:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			emg_buffer_full = 0;  // Clear flag

			// Calculate RMS from EMG samples buffer
			rms_adc = calculate_RMS();
 288:	9a df       	rcall	.-204    	; 0x1be <calculate_RMS>
 28a:	9c 01       	movw	r18, r24

			// Convert ADC value to millivolts
			rms_mv = (uint32_t)rms_adc * VREF / 1023;
 28c:	a8 e8       	ldi	r26, 0x88	; 136
 28e:	b3 e1       	ldi	r27, 0x13	; 19
 290:	21 d1       	rcall	.+578    	; 0x4d4 <__umulhisi3>
 292:	68 31       	cpi	r22, 0x18	; 24

			if (rms_mv >= 1000){
 294:	7c 49       	sbci	r23, 0x9C	; 156
 296:	8f 40       	sbci	r24, 0x0F	; 15
 298:	91 05       	cpc	r25, r1
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <main+0x36>
 29c:	85 b1       	in	r24, 0x05	; 5
				PORTB |= (1 << PB7); // Turn ON LED
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	85 b9       	out	0x05, r24	; 5
 2a2:	ec cf       	rjmp	.-40     	; 0x27c <main+0xe>
 2a4:	85 b1       	in	r24, 0x05	; 5
			} else {
				PORTB &= ~(1 << PB7); // Turn OFF LED
 2a6:	8f 77       	andi	r24, 0x7F	; 127
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	e8 cf       	rjmp	.-48     	; 0x27c <main+0xe>

000002ac <__fixunssfsi>:
 2ac:	70 d0       	rcall	.+224    	; 0x38e <__fp_splitA>
 2ae:	88 f0       	brcs	.+34     	; 0x2d2 <__fixunssfsi+0x26>
 2b0:	9f 57       	subi	r25, 0x7F	; 127
 2b2:	90 f0       	brcs	.+36     	; 0x2d8 <__fixunssfsi+0x2c>
 2b4:	b9 2f       	mov	r27, r25
 2b6:	99 27       	eor	r25, r25
 2b8:	b7 51       	subi	r27, 0x17	; 23
 2ba:	a0 f0       	brcs	.+40     	; 0x2e4 <__fixunssfsi+0x38>
 2bc:	d1 f0       	breq	.+52     	; 0x2f2 <__fixunssfsi+0x46>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	1a f0       	brmi	.+6      	; 0x2ce <__fixunssfsi+0x22>
 2c8:	ba 95       	dec	r27
 2ca:	c9 f7       	brne	.-14     	; 0x2be <__fixunssfsi+0x12>
 2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <__fixunssfsi+0x46>
 2ce:	b1 30       	cpi	r27, 0x01	; 1
 2d0:	81 f0       	breq	.+32     	; 0x2f2 <__fixunssfsi+0x46>
 2d2:	77 d0       	rcall	.+238    	; 0x3c2 <__fp_zero>
 2d4:	b1 e0       	ldi	r27, 0x01	; 1
 2d6:	08 95       	ret
 2d8:	74 c0       	rjmp	.+232    	; 0x3c2 <__fp_zero>
 2da:	67 2f       	mov	r22, r23
 2dc:	78 2f       	mov	r23, r24
 2de:	88 27       	eor	r24, r24
 2e0:	b8 5f       	subi	r27, 0xF8	; 248
 2e2:	39 f0       	breq	.+14     	; 0x2f2 <__fixunssfsi+0x46>
 2e4:	b9 3f       	cpi	r27, 0xF9	; 249
 2e6:	cc f3       	brlt	.-14     	; 0x2da <__fixunssfsi+0x2e>
 2e8:	86 95       	lsr	r24
 2ea:	77 95       	ror	r23
 2ec:	67 95       	ror	r22
 2ee:	b3 95       	inc	r27
 2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__fixunssfsi+0x3c>
 2f2:	3e f4       	brtc	.+14     	; 0x302 <__fixunssfsi+0x56>
 2f4:	90 95       	com	r25
 2f6:	80 95       	com	r24
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	8f 4f       	sbci	r24, 0xFF	; 255
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	08 95       	ret

00000304 <__floatunsisf>:
 304:	e8 94       	clt
 306:	09 c0       	rjmp	.+18     	; 0x31a <__floatsisf+0x12>

00000308 <__floatsisf>:
 308:	97 fb       	bst	r25, 7
 30a:	3e f4       	brtc	.+14     	; 0x31a <__floatsisf+0x12>
 30c:	90 95       	com	r25
 30e:	80 95       	com	r24
 310:	70 95       	com	r23
 312:	61 95       	neg	r22
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	8f 4f       	sbci	r24, 0xFF	; 255
 318:	9f 4f       	sbci	r25, 0xFF	; 255
 31a:	99 23       	and	r25, r25
 31c:	a9 f0       	breq	.+42     	; 0x348 <__floatsisf+0x40>
 31e:	f9 2f       	mov	r31, r25
 320:	96 e9       	ldi	r25, 0x96	; 150
 322:	bb 27       	eor	r27, r27
 324:	93 95       	inc	r25
 326:	f6 95       	lsr	r31
 328:	87 95       	ror	r24
 32a:	77 95       	ror	r23
 32c:	67 95       	ror	r22
 32e:	b7 95       	ror	r27
 330:	f1 11       	cpse	r31, r1
 332:	f8 cf       	rjmp	.-16     	; 0x324 <__floatsisf+0x1c>
 334:	fa f4       	brpl	.+62     	; 0x374 <__floatsisf+0x6c>
 336:	bb 0f       	add	r27, r27
 338:	11 f4       	brne	.+4      	; 0x33e <__floatsisf+0x36>
 33a:	60 ff       	sbrs	r22, 0
 33c:	1b c0       	rjmp	.+54     	; 0x374 <__floatsisf+0x6c>
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	8f 4f       	sbci	r24, 0xFF	; 255
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	16 c0       	rjmp	.+44     	; 0x374 <__floatsisf+0x6c>
 348:	88 23       	and	r24, r24
 34a:	11 f0       	breq	.+4      	; 0x350 <__floatsisf+0x48>
 34c:	96 e9       	ldi	r25, 0x96	; 150
 34e:	11 c0       	rjmp	.+34     	; 0x372 <__floatsisf+0x6a>
 350:	77 23       	and	r23, r23
 352:	21 f0       	breq	.+8      	; 0x35c <__floatsisf+0x54>
 354:	9e e8       	ldi	r25, 0x8E	; 142
 356:	87 2f       	mov	r24, r23
 358:	76 2f       	mov	r23, r22
 35a:	05 c0       	rjmp	.+10     	; 0x366 <__floatsisf+0x5e>
 35c:	66 23       	and	r22, r22
 35e:	71 f0       	breq	.+28     	; 0x37c <__floatsisf+0x74>
 360:	96 e8       	ldi	r25, 0x86	; 134
 362:	86 2f       	mov	r24, r22
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	2a f0       	brmi	.+10     	; 0x374 <__floatsisf+0x6c>
 36a:	9a 95       	dec	r25
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	da f7       	brpl	.-10     	; 0x36a <__floatsisf+0x62>
 374:	88 0f       	add	r24, r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	97 f9       	bld	r25, 7
 37c:	08 95       	ret

0000037e <__fp_split3>:
 37e:	57 fd       	sbrc	r21, 7
 380:	90 58       	subi	r25, 0x80	; 128
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	59 f0       	breq	.+22     	; 0x39e <__fp_splitA+0x10>
 388:	5f 3f       	cpi	r21, 0xFF	; 255
 38a:	71 f0       	breq	.+28     	; 0x3a8 <__fp_splitA+0x1a>
 38c:	47 95       	ror	r20

0000038e <__fp_splitA>:
 38e:	88 0f       	add	r24, r24
 390:	97 fb       	bst	r25, 7
 392:	99 1f       	adc	r25, r25
 394:	61 f0       	breq	.+24     	; 0x3ae <__fp_splitA+0x20>
 396:	9f 3f       	cpi	r25, 0xFF	; 255
 398:	79 f0       	breq	.+30     	; 0x3b8 <__fp_splitA+0x2a>
 39a:	87 95       	ror	r24
 39c:	08 95       	ret
 39e:	12 16       	cp	r1, r18
 3a0:	13 06       	cpc	r1, r19
 3a2:	14 06       	cpc	r1, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	f2 cf       	rjmp	.-28     	; 0x38c <__fp_split3+0xe>
 3a8:	46 95       	lsr	r20
 3aa:	f1 df       	rcall	.-30     	; 0x38e <__fp_splitA>
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <__fp_splitA+0x30>
 3ae:	16 16       	cp	r1, r22
 3b0:	17 06       	cpc	r1, r23
 3b2:	18 06       	cpc	r1, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	f1 cf       	rjmp	.-30     	; 0x39a <__fp_splitA+0xc>
 3b8:	86 95       	lsr	r24
 3ba:	71 05       	cpc	r23, r1
 3bc:	61 05       	cpc	r22, r1
 3be:	08 94       	sec
 3c0:	08 95       	ret

000003c2 <__fp_zero>:
 3c2:	e8 94       	clt

000003c4 <__fp_szero>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	66 27       	eor	r22, r22
 3c8:	77 27       	eor	r23, r23
 3ca:	cb 01       	movw	r24, r22
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <__fp_szero+0x12>
 3d2:	0e f4       	brtc	.+2      	; 0x3d6 <__fp_szero+0x12>
 3d4:	4d c0       	rjmp	.+154    	; 0x470 <__fp_nan>
 3d6:	3e c0       	rjmp	.+124    	; 0x454 <__fp_mpack>

000003d8 <sqrt>:
 3d8:	da df       	rcall	.-76     	; 0x38e <__fp_splitA>
 3da:	d0 f3       	brcs	.-12     	; 0x3d0 <__fp_szero+0xc>
 3dc:	99 23       	and	r25, r25
 3de:	d9 f3       	breq	.-10     	; 0x3d6 <__fp_szero+0x12>
 3e0:	ce f3       	brts	.-14     	; 0x3d4 <__fp_szero+0x10>
 3e2:	9f 57       	subi	r25, 0x7F	; 127
 3e4:	55 0b       	sbc	r21, r21
 3e6:	87 ff       	sbrs	r24, 7
 3e8:	46 d0       	rcall	.+140    	; 0x476 <__fp_norm2>
 3ea:	00 24       	eor	r0, r0
 3ec:	a0 e6       	ldi	r26, 0x60	; 96
 3ee:	40 ea       	ldi	r20, 0xA0	; 160
 3f0:	90 01       	movw	r18, r0
 3f2:	80 58       	subi	r24, 0x80	; 128
 3f4:	56 95       	lsr	r21
 3f6:	97 95       	ror	r25
 3f8:	28 f4       	brcc	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fa:	80 5c       	subi	r24, 0xC0	; 192
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	20 f0       	brcs	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 404:	26 17       	cp	r18, r22
 406:	37 07       	cpc	r19, r23
 408:	48 07       	cpc	r20, r24
 40a:	30 f4       	brcc	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	62 1b       	sub	r22, r18
 40e:	73 0b       	sbc	r23, r19
 410:	84 0b       	sbc	r24, r20
 412:	20 29       	or	r18, r0
 414:	31 29       	or	r19, r1
 416:	4a 2b       	or	r20, r26
 418:	a6 95       	lsr	r26
 41a:	17 94       	ror	r1
 41c:	07 94       	ror	r0
 41e:	20 25       	eor	r18, r0
 420:	31 25       	eor	r19, r1
 422:	4a 27       	eor	r20, r26
 424:	58 f7       	brcc	.-42     	; 0x3fc <sqrt+0x24>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	20 f0       	brcs	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	26 17       	cp	r18, r22
 430:	37 07       	cpc	r19, r23
 432:	48 07       	cpc	r20, r24
 434:	30 f4       	brcc	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 436:	62 0b       	sbc	r22, r18
 438:	73 0b       	sbc	r23, r19
 43a:	84 0b       	sbc	r24, r20
 43c:	20 0d       	add	r18, r0
 43e:	31 1d       	adc	r19, r1
 440:	41 1d       	adc	r20, r1
 442:	a0 95       	com	r26
 444:	81 f7       	brne	.-32     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 446:	b9 01       	movw	r22, r18
 448:	84 2f       	mov	r24, r20
 44a:	91 58       	subi	r25, 0x81	; 129
 44c:	88 0f       	add	r24, r24
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	08 95       	ret

00000454 <__fp_mpack>:
 454:	9f 3f       	cpi	r25, 0xFF	; 255
 456:	31 f0       	breq	.+12     	; 0x464 <__fp_mpack_finite+0xc>

00000458 <__fp_mpack_finite>:
 458:	91 50       	subi	r25, 0x01	; 1
 45a:	20 f4       	brcc	.+8      	; 0x464 <__fp_mpack_finite+0xc>
 45c:	87 95       	ror	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	88 0f       	add	r24, r24
 466:	91 1d       	adc	r25, r1
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	97 f9       	bld	r25, 7
 46e:	08 95       	ret

00000470 <__fp_nan>:
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	08 95       	ret

00000476 <__fp_norm2>:
 476:	91 50       	subi	r25, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	d2 f7       	brpl	.-12     	; 0x476 <__fp_norm2>
 482:	08 95       	ret

00000484 <__udivmodsi4>:
 484:	a1 e2       	ldi	r26, 0x21	; 33
 486:	1a 2e       	mov	r1, r26
 488:	aa 1b       	sub	r26, r26
 48a:	bb 1b       	sub	r27, r27
 48c:	fd 01       	movw	r30, r26
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <__udivmodsi4_ep>

00000490 <__udivmodsi4_loop>:
 490:	aa 1f       	adc	r26, r26
 492:	bb 1f       	adc	r27, r27
 494:	ee 1f       	adc	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	a2 17       	cp	r26, r18
 49a:	b3 07       	cpc	r27, r19
 49c:	e4 07       	cpc	r30, r20
 49e:	f5 07       	cpc	r31, r21
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__udivmodsi4_ep>
 4a2:	a2 1b       	sub	r26, r18
 4a4:	b3 0b       	sbc	r27, r19
 4a6:	e4 0b       	sbc	r30, r20
 4a8:	f5 0b       	sbc	r31, r21

000004aa <__udivmodsi4_ep>:
 4aa:	66 1f       	adc	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	1a 94       	dec	r1
 4b4:	69 f7       	brne	.-38     	; 0x490 <__udivmodsi4_loop>
 4b6:	60 95       	com	r22
 4b8:	70 95       	com	r23
 4ba:	80 95       	com	r24
 4bc:	90 95       	com	r25
 4be:	9b 01       	movw	r18, r22
 4c0:	ac 01       	movw	r20, r24
 4c2:	bd 01       	movw	r22, r26
 4c4:	cf 01       	movw	r24, r30
 4c6:	08 95       	ret

000004c8 <__mulhisi3>:
 4c8:	05 d0       	rcall	.+10     	; 0x4d4 <__umulhisi3>
 4ca:	33 23       	and	r19, r19
 4cc:	12 f4       	brpl	.+4      	; 0x4d2 <__mulhisi3+0xa>
 4ce:	8a 1b       	sub	r24, r26
 4d0:	9b 0b       	sbc	r25, r27
 4d2:	10 c0       	rjmp	.+32     	; 0x4f4 <__usmulhisi3_tail>

000004d4 <__umulhisi3>:
 4d4:	a2 9f       	mul	r26, r18
 4d6:	b0 01       	movw	r22, r0
 4d8:	b3 9f       	mul	r27, r19
 4da:	c0 01       	movw	r24, r0
 4dc:	a3 9f       	mul	r26, r19
 4de:	70 0d       	add	r23, r0
 4e0:	81 1d       	adc	r24, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	91 1d       	adc	r25, r1
 4e6:	b2 9f       	mul	r27, r18
 4e8:	70 0d       	add	r23, r0
 4ea:	81 1d       	adc	r24, r1
 4ec:	11 24       	eor	r1, r1
 4ee:	91 1d       	adc	r25, r1
 4f0:	08 95       	ret

000004f2 <__usmulhisi3>:
 4f2:	f0 df       	rcall	.-32     	; 0x4d4 <__umulhisi3>

000004f4 <__usmulhisi3_tail>:
 4f4:	b7 ff       	sbrs	r27, 7
 4f6:	08 95       	ret
 4f8:	82 1b       	sub	r24, r18
 4fa:	93 0b       	sbc	r25, r19
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
